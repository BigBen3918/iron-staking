{
  "address": "0xBa6770A08D1D31Ab24d36d14C4D8E2d4BDA72f21",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_timer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketSupply",
          "type": "uint256"
        }
      ],
      "name": "LotteryClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketSupply",
          "type": "uint256"
        }
      ],
      "name": "LotteryOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "maxValidRange",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "powerBallRange",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "prizeDistribution",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startingPrize",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "costPerTicket",
          "type": "uint256"
        }
      ],
      "name": "LotterySettingsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ticketIDs",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint16[]",
          "name": "numbers",
          "type": "uint16[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pricePaid",
          "type": "uint256"
        }
      ],
      "name": "NewBatchMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lotteryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "RequestNumbers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "numbers",
          "type": "uint256[]"
        }
      ],
      "name": "WinnersDrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_noOfMatching",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "_prizeForMatching",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "prize",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_numberOfTickets",
          "type": "uint8"
        },
        {
          "internalType": "uint16[]",
          "name": "_chosenNumbersForEachTicket",
          "type": "uint16[]"
        }
      ],
      "name": "batchBuyLottoTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokeIds",
          "type": "uint256[]"
        }
      ],
      "name": "batchClaimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "costPerTicket_",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numberOfTickets",
          "type": "uint256"
        }
      ],
      "name": "costToBuyTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalCost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultDuration_",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_seed",
          "type": "uint256"
        }
      ],
      "name": "drawWinningNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "getBasicLottoInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lotteryID",
              "type": "uint256"
            },
            {
              "internalType": "enum Lottery.Status",
              "name": "lotteryStatus",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "prizePool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "costPerTicket",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "prizeDistribution",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "startingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint16[]",
              "name": "winningNumbers",
              "type": "uint16[]"
            },
            {
              "internalType": "uint256[]",
              "name": "winners",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Lottery.LottoInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentLotto",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lotteryID",
              "type": "uint256"
            },
            {
              "internalType": "enum Lottery.Status",
              "name": "lotteryStatus",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "prizePool",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "costPerTicket",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "prizeDistribution",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "startingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closingTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint16[]",
              "name": "winningNumbers",
              "type": "uint16[]"
            },
            {
              "internalType": "uint256[]",
              "name": "winners",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct Lottery.LottoInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentPrizes",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "prizes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTotalPrize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalPrize",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxRange",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_iron",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_ticket",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_randomNumberGenerator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_prizeReservePool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_taxService",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startingTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_closingTime",
          "type": "uint256"
        }
      ],
      "name": "manualStartLotto",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manuallyOpenLotto",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxValidRange_",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_randomNumber",
          "type": "uint256"
        }
      ],
      "name": "numbersDrawn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "powerBallRange_",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "prizeDistribution_",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prizeReservePool_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_seed",
          "type": "uint256"
        }
      ],
      "name": "retryDrawWinningNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "setCurrentTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_prizeReservePool",
          "type": "address"
        }
      ],
      "name": "setPrizeReservePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_randomGenerator",
          "type": "address"
        }
      ],
      "name": "setRandomGenerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_taxRate",
          "type": "uint256"
        }
      ],
      "name": "setTaxRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_taxService",
          "type": "address"
        }
      ],
      "name": "setTaxService",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ticket",
          "type": "address"
        }
      ],
      "name": "setTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_zap",
          "type": "address"
        }
      ],
      "name": "setZapFunction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sizeOfLottery_",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startingPrize_",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "taxRate_",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unclaimedPrize_",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "updateDefaultDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_maxValidRange",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_powerBallRange",
          "type": "uint16"
        },
        {
          "internalType": "uint256[]",
          "name": "_prizeDistribution",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_costPerTicket",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startingPrize",
          "type": "uint256"
        }
      ],
      "name": "updateLottoSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLottoContract",
          "type": "address"
        }
      ],
      "name": "upgradeNewLotoContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upgraded_",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_numberOfTickets",
          "type": "uint8"
        },
        {
          "internalType": "uint16[]",
          "name": "_chosenNumbersForEachTicket",
          "type": "uint16[]"
        }
      ],
      "name": "zapBatchBuyLottoTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zap_",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x56ce78afd234a47c5107092b6608d2d29ba71a7f9459f112524d86c73f787df0",
  "receipt": {
    "to": null,
    "from": "0x5AeBdE597752d689132Dc64D093ff4b09067e9e6",
    "contractAddress": "0xBa6770A08D1D31Ab24d36d14C4D8E2d4BDA72f21",
    "transactionIndex": 12,
    "gasUsed": "4742704",
    "logsBloom": "0x
    "blockHash": "0xf6d79761b3757bc4220d640144c890720af04baf6e85ad5e69f06566df463f31",
    "transactionHash": "0x56ce78afd234a47c5107092b6608d2d29ba71a7f9459f112524d86c73f787df0",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 14754131,
        "transactionHash": "0x56ce78afd234a47c5107092b6608d2d29ba71a7f9459f112524d86c73f787df0",
        "address": "0xBa6770A08D1D31Ab24d36d14C4D8E2d4BDA72f21",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005aebde597752d689132dc64d093ff4b09067e9e6"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0xf6d79761b3757bc4220d640144c890720af04baf6e85ad5e69f06566df463f31"
      },
      {
        "transactionIndex": 12,
        "blockNumber": 14754131,
        "transactionHash": "0x56ce78afd234a47c5107092b6608d2d29ba71a7f9459f112524d86c73f787df0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005aebde597752d689132dc64d093ff4b09067e9e6",
          "0x0000000000000000000000008a12c7d5bc33062573e00580b8d05e93fbb70b2d"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000010d976d331e00000000000000000000000000000000000000000000000000106e5f0d3d3036a4e0000000000000000000000000000000000000000000000335a3dfda04423f85b00000000000000000000000000000000000000000000000106d5175cffd18a4e0000000000000000000000000000000000000000000000335a4ed7171755d85b",
        "logIndex": 17,
        "blockHash": "0xf6d79761b3757bc4220d640144c890720af04baf6e85ad5e69f06566df463f31"
      }
    ],
    "blockNumber": 14754131,
    "cumulativeGasUsed": "5970105",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x0000000000000000000000000000000000000000"],
  "solcInputHash": "656fce16732d1ea41673c6341e4dd2c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketSupply\",\"type\":\"uint256\"}],\"name\":\"LotteryClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketSupply\",\"type\":\"uint256\"}],\"name\":\"LotteryOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"maxValidRange\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"powerBallRange\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"prizeDistribution\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startingPrize\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"costPerTicket\",\"type\":\"uint256\"}],\"name\":\"LotterySettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ticketIDs\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"numbers\",\"type\":\"uint16[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"}],\"name\":\"NewBatchMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"RequestNumbers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"numbers\",\"type\":\"uint256[]\"}],\"name\":\"WinnersDrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_noOfMatching\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"_prizeForMatching\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"prize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_numberOfTickets\",\"type\":\"uint8\"},{\"internalType\":\"uint16[]\",\"name\":\"_chosenNumbersForEachTicket\",\"type\":\"uint16[]\"}],\"name\":\"batchBuyLottoTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokeIds\",\"type\":\"uint256[]\"}],\"name\":\"batchClaimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costPerTicket_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfTickets\",\"type\":\"uint256\"}],\"name\":\"costToBuyTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultDuration_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"drawWinningNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"getBasicLottoInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lotteryID\",\"type\":\"uint256\"},{\"internalType\":\"enum Lottery.Status\",\"name\":\"lotteryStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"prizePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"costPerTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"prizeDistribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"startingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"winningNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"winners\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Lottery.LottoInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentLotto\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lotteryID\",\"type\":\"uint256\"},{\"internalType\":\"enum Lottery.Status\",\"name\":\"lotteryStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"prizePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"costPerTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"prizeDistribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"startingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"winningNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256[]\",\"name\":\"winners\",\"type\":\"uint256[]\"}],\"internalType\":\"struct Lottery.LottoInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPrizes\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prizes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTotalPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalPrize\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxRange\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_iron\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomNumberGenerator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_prizeReservePool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_taxService\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_closingTime\",\"type\":\"uint256\"}],\"name\":\"manualStartLotto\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manuallyOpenLotto\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxValidRange_\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_randomNumber\",\"type\":\"uint256\"}],\"name\":\"numbersDrawn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"powerBallRange_\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"prizeDistribution_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prizeReservePool_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_seed\",\"type\":\"uint256\"}],\"name\":\"retryDrawWinningNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setCurrentTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prizeReservePool\",\"type\":\"address\"}],\"name\":\"setPrizeReservePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_randomGenerator\",\"type\":\"address\"}],\"name\":\"setRandomGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_taxRate\",\"type\":\"uint256\"}],\"name\":\"setTaxRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxService\",\"type\":\"address\"}],\"name\":\"setTaxService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ticket\",\"type\":\"address\"}],\"name\":\"setTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zap\",\"type\":\"address\"}],\"name\":\"setZapFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sizeOfLottery_\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingPrize_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRate_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedPrize_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"updateDefaultDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_maxValidRange\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_powerBallRange\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"_prizeDistribution\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_costPerTicket\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startingPrize\",\"type\":\"uint256\"}],\"name\":\"updateLottoSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLottoContract\",\"type\":\"address\"}],\"name\":\"upgradeNewLotoContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgraded_\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_numberOfTickets\",\"type\":\"uint8\"},{\"internalType\":\"uint16[]\",\"name\":\"_chosenNumbersForEachTicket\",\"type\":\"uint16[]\"}],\"name\":\"zapBatchBuyLottoTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zap_\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"_prizeForMatching(uint8,uint256)\":{\"params\":{\"_lotteryId\":\": The ID of the lottery the user is claiming on\",\"_noOfMatching\":\": The number of matching numbers the user has\"},\"returns\":{\"prize\":\" The prize amount in cake the user is entitled to\"}},\"getCurrentTime()\":{\"returns\":{\"_0\":\"uint for the current Testable timestamp.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCurrentTime(uint256)\":{\"details\":\"Will revert if not running in test mode.\",\"params\":{\"time\":\"timestamp to set current Testable time to.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateLottoSettings(uint16,uint16,uint256[],uint256,uint256)\":{\"params\":{\"_prizeDistribution\":\"An array defining the distribution of the          prize pool. I.e if a lotto has 5 numbers, the distribution could          be [5, 10, 15, 20, 30] = 100%. This means if you get one number          right you get 5% of the pool, 2 matching would be 10% and so on.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getCurrentTime()\":{\"notice\":\"Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.\"},\"manualStartLotto(uint256,uint256)\":{\"notice\":\"manually start by admin, by pass auto duration\"},\"setCurrentTime(uint256)\":{\"notice\":\"Sets the current time.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IRandomNumberGenerator.sol\\\";\\nimport \\\"./interfaces/ITicket.sol\\\";\\nimport \\\"./utils/Testable.sol\\\";\\nimport \\\"./interfaces/ITaxService.sol\\\";\\nimport \\\"./interfaces/IPrizeReservePool.sol\\\";\\n\\ncontract Lottery is Ownable, Initializable, Testable {\\n    // using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    // Represents the status of the lottery\\n    enum Status {\\n        NotStarted, // The lottery has not started yet\\n        Open, // The lottery is open for ticket purchases\\n        Closed, // The lottery is no longer open for ticket purchases\\n        Completed // The numbers drawn\\n    }\\n\\n    // All the needed info around a lottery\\n    struct LottoInfo {\\n        uint256 lotteryID; // ID for lotto\\n        Status lotteryStatus; // Status for lotto\\n        uint256 prizePool; // The amount of IRON for prize money\\n        uint256 costPerTicket; // Cost per ticket in $IRON\\n        uint256[] prizeDistribution; // The distribution for prize money\\n        uint256 startingTimestamp; // Block timestamp for star of lotto\\n        uint256 closingTimestamp; // Block timestamp for end of entries\\n        uint16[] winningNumbers; // The winning numbers\\n        uint256[] winners; // the winners of each prize\\n    }\\n\\n    // State variables\\n    // Instance of IRON token (collateral currency for lotto)\\n    IERC20 internal iron_;\\n    // Storing of the NFT\\n    ITicket internal ticket_;\\n\\n    // Random number generator\\n    // Storing of the randomness generator\\n    IRandomNumberGenerator internal randomGenerator_;\\n    // Instance of TaxCollection\\n    ITaxService internal taxService_;\\n    // Request ID for random number\\n    bytes32 internal requestId_;\\n\\n    // Counter for lottery IDs\\n    uint256 private lotteryIdCounter_;\\n\\n    // These stated is fixed due to technical implementation\\n    // Lottery size, power number not included\\n    uint8 public constant sizeOfLottery_ = 4;\\n    // support 2 numbers match, if require 3 numbers match, use value of 5\\n    // uint8 public constant sizeOfIndex_ = 5;\\n\\n    // precision for all distribution\\n    uint256 public constant PRECISION = 1e6;\\n    uint256 public unclaimedPrize_;\\n    address public controller_;\\n    address public zap_;\\n\\n    // Max range for numbers (starting at 0)\\n    uint16 public maxValidRange_;\\n    uint16 public powerBallRange_;\\n\\n    // settings for lotto, will be applied to newly created lotto\\n    uint256 public startingPrize_;\\n    uint256 public costPerTicket_; // Cost per ticket in $IRON\\n\\n    // The distribution for prize money, highest first\\n    uint256[] public prizeDistribution_;\\n\\n    uint256 public taxRate_;\\n    address public prizeReservePool_;\\n\\n    // Lottery ID's to info\\n    mapping(uint256 => LottoInfo) internal allLotteries_;\\n\\n    uint256 public defaultDuration_ = 24 hours;\\n\\n    bool public upgraded_ = false;\\n\\n    //-------------------------------------------------------------------------\\n    // EVENTS\\n    //-------------------------------------------------------------------------\\n\\n    event NewBatchMint(address indexed minter, uint256[] ticketIDs, uint16[] numbers, uint256 pricePaid);\\n\\n    event RequestNumbers(uint256 lotteryId, bytes32 requestId);\\n\\n    event LotterySettingsUpdated(\\n        uint16 maxValidRange,\\n        uint16 powerBallRange,\\n        uint256[] prizeDistribution,\\n        uint256 startingPrize,\\n        uint256 costPerTicket\\n    );\\n\\n    event LotteryOpened(uint256 lotteryId, uint256 ticketSupply);\\n\\n    event LotteryClosed(uint256 lotteryId, uint256 ticketSupply);\\n\\n    event WinnersDrawn(uint256[] numbers);\\n\\n    //-------------------------------------------------------------------------\\n    // MODIFIERS\\n    //-------------------------------------------------------------------------\\n\\n    modifier onlyRandomGenerator() {\\n        require(msg.sender == address(randomGenerator_), \\\"Only random generator\\\");\\n        _;\\n    }\\n\\n    modifier onlyController() {\\n        require(msg.sender == controller_, \\\"Only controller\\\");\\n        _;\\n    }\\n\\n    modifier notContract() {\\n        require(!address(msg.sender).isContract(), \\\"contract not allowed\\\");\\n        // solhint-disable-next-line avoid-tx-origin\\n        require(msg.sender == tx.origin, \\\"proxy contract not allowed\\\");\\n        _;\\n    }\\n\\n    modifier notUpgraded() {\\n        require(upgraded_ == false, \\\"This contract was upgraded\\\");\\n        _;\\n    }\\n\\n    modifier onlyZap() {\\n        require(msg.sender == zap_, \\\"Only zap function can call\\\");\\n        _;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // CONSTRUCTOR\\n    //-------------------------------------------------------------------------\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address _timer) Testable(_timer) {}\\n\\n    function initialize(\\n        address _iron,\\n        address _ticket,\\n        address _randomNumberGenerator,\\n        address _prizeReservePool,\\n        address _taxService,\\n        address _controller\\n    ) external initializer onlyOwner {\\n        require(\\n            _ticket != address(0) &&\\n                _randomNumberGenerator != address(0) &&\\n                _prizeReservePool != address(0) &&\\n                _taxService != address(0) &&\\n                _iron != address(0),\\n            \\\"Contracts cannot be 0 address\\\"\\n        );\\n        iron_ = IERC20(_iron);\\n        ticket_ = ITicket(_ticket);\\n        randomGenerator_ = IRandomNumberGenerator(_randomNumberGenerator);\\n        prizeReservePool_ = _prizeReservePool;\\n        taxService_ = ITaxService(_taxService);\\n        controller_ = _controller;\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // VIEW FUNCTIONS\\n    //-------------------------------------------------------------------------\\n\\n    function costToBuyTickets(uint256 _lotteryId, uint256 _numberOfTickets) external view returns (uint256 totalCost) {\\n        uint256 pricePer = allLotteries_[_lotteryId].costPerTicket;\\n        totalCost = pricePer * _numberOfTickets; // solidity 0.8 auto handle overflow\\n    }\\n\\n    function getBasicLottoInfo(uint256 _lotteryId) external view returns (LottoInfo memory) {\\n        return (allLotteries_[_lotteryId]);\\n    }\\n\\n    function getCurrentLotto() external view returns (LottoInfo memory) {\\n        require(lotteryIdCounter_ > 0, \\\"no lottery created\\\");\\n        return allLotteries_[lotteryIdCounter_];\\n    }\\n\\n    function getCurrentTotalPrize() public view returns (uint256 totalPrize) {\\n        totalPrize = iron_.balanceOf(address(this)) - unclaimedPrize_;\\n    }\\n\\n    function getMaxRange() external view returns (uint16) {\\n        return maxValidRange_;\\n    }\\n\\n    function getCurrentPrizes() public view returns (uint256[] memory prizes) {\\n        require(lotteryIdCounter_ > 0, \\\"no lottery created\\\");\\n        LottoInfo storage lotto = allLotteries_[lotteryIdCounter_];\\n        prizes = new uint256[](lotto.prizeDistribution.length);\\n\\n        uint256 totalPrize = getCurrentTotalPrize();\\n        for (uint256 i = 0; i < lotto.prizeDistribution.length; i++) {\\n            prizes[i] = (totalPrize * lotto.prizeDistribution[i]) / PRECISION;\\n        }\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // Restricted Access Functions (onlyOwner)\\n\\n    /**\\n     * manually start by admin, by pass auto duration\\n     */\\n    function manualStartLotto(uint256 _startingTime, uint256 _closingTime) external onlyController returns (uint256) {\\n        return _createNewLotto(_startingTime, _closingTime);\\n    }\\n\\n    function manuallyOpenLotto() external onlyController {\\n        require(lotteryIdCounter_ > 0, \\\"no lottery created\\\");\\n        LottoInfo storage _currLotto = allLotteries_[lotteryIdCounter_];\\n        uint256 currentTime = getCurrentTime();\\n        require(currentTime >= _currLotto.startingTimestamp, \\\"Invalid time for mint:start\\\");\\n        require(currentTime < _currLotto.closingTimestamp, \\\"Invalid time for mint:end\\\");\\n        if (_currLotto.lotteryStatus == Status.NotStarted) {\\n            if (_currLotto.startingTimestamp <= getCurrentTime()) {\\n                _currLotto.lotteryStatus = Status.Open;\\n            }\\n        }\\n    }\\n\\n    function setTaxRate(uint256 _taxRate) external onlyOwner {\\n        require(_taxRate <= PRECISION, \\\"total must lower than 100%\\\");\\n        taxRate_ = _taxRate;\\n    }\\n\\n    function setController(address _controller) external onlyOwner {\\n        require(_controller != address(0), \\\"Contracts cannot be 0 address\\\");\\n        controller_ = _controller;\\n    }\\n\\n    function setPrizeReservePool(address _prizeReservePool) external onlyOwner {\\n        require(_prizeReservePool != address(0), \\\"Contracts cannot be 0 address\\\");\\n        prizeReservePool_ = _prizeReservePool;\\n    }\\n\\n    function setZapFunction(address _zap) external onlyOwner {\\n        require(_zap != address(0), \\\"Contracts cannot be 0 address\\\");\\n        zap_ = _zap;\\n    }\\n\\n    function setTaxService(address _taxService) external onlyOwner {\\n        require(_taxService != address(0), \\\"Contracts cannot be 0 address\\\");\\n        taxService_ = ITaxService(_taxService);\\n    }\\n\\n    function setRandomGenerator(address _randomGenerator) external onlyOwner {\\n        require(_randomGenerator != address(0), \\\"Contracts cannot be 0 address\\\");\\n        randomGenerator_ = IRandomNumberGenerator(_randomGenerator);\\n    }\\n\\n    function setTicket(address _ticket) external onlyOwner {\\n        require(_ticket != address(0), \\\"Contracts cannot be 0 address\\\");\\n        ticket_ = ITicket(_ticket);\\n    }\\n\\n    function upgradeNewLotoContract(address newLottoContract) external onlyOwner {\\n        require(newLottoContract != address(0), \\\"Invalid contract\\\");\\n        uint256 _movableAmount = getCurrentTotalPrize();\\n        upgraded_ = true;\\n        iron_.safeTransfer(newLottoContract, _movableAmount);\\n    }\\n\\n    /**\\n     * @param   _prizeDistribution An array defining the distribution of the\\n     *          prize pool. I.e if a lotto has 5 numbers, the distribution could\\n     *          be [5, 10, 15, 20, 30] = 100%. This means if you get one number\\n     *          right you get 5% of the pool, 2 matching would be 10% and so on.\\n     */\\n    function updateLottoSettings(\\n        uint16 _maxValidRange,\\n        uint16 _powerBallRange,\\n        uint256[] calldata _prizeDistribution,\\n        uint256 _costPerTicket,\\n        uint256 _startingPrize\\n    ) external onlyOwner {\\n        require(_maxValidRange >= 4, \\\"Range of number must be 4 atleast\\\");\\n        require(_powerBallRange != 0, \\\"Power number range can not be 0\\\");\\n        require(_startingPrize != 0 && _costPerTicket != 0, \\\"Prize or cost cannot be 0\\\");\\n        // Ensuring that prize distribution total is 100%\\n        uint256 prizeDistributionTotal = 0;\\n        for (uint256 j = 0; j < _prizeDistribution.length; j++) {\\n            prizeDistributionTotal = prizeDistributionTotal + uint256(_prizeDistribution[j]);\\n        }\\n        require(prizeDistributionTotal == PRECISION, \\\"Prize distribution is not 100%\\\");\\n\\n        maxValidRange_ = _maxValidRange;\\n        powerBallRange_ = _powerBallRange;\\n        prizeDistribution_ = _prizeDistribution;\\n        startingPrize_ = _startingPrize;\\n        costPerTicket_ = _costPerTicket;\\n\\n        emit LotterySettingsUpdated(\\n            maxValidRange_,\\n            powerBallRange_,\\n            prizeDistribution_,\\n            startingPrize_,\\n            costPerTicket_\\n        );\\n    }\\n\\n    function updateDefaultDuration(uint256 _duration) external onlyOwner {\\n        require(_duration > 0, \\\"Duration cannot be 0\\\");\\n        defaultDuration_ = _duration;\\n    }\\n\\n    function drawWinningNumbers(uint256 _lotteryId, uint256 _seed) external onlyController notUpgraded {\\n        LottoInfo storage _currLotto = allLotteries_[_lotteryId];\\n        // Checks that the lottery is past the closing block\\n        require(_currLotto.closingTimestamp <= getCurrentTime(), \\\"Cannot set winning numbers during lottery\\\");\\n        // Checks lottery numbers have not already been drawn\\n        require(_currLotto.lotteryStatus == Status.Open, \\\"Lottery State incorrect for draw\\\");\\n        // Sets lottery status to closed\\n        _currLotto.lotteryStatus = Status.Closed;\\n        // Sets prize pool\\n        _currLotto.prizePool = getCurrentTotalPrize();\\n        // Requests a random number from the generator\\n        requestId_ = randomGenerator_.getRandomNumber(_lotteryId, _seed);\\n        // Emits that random number has been requested\\n        emit RequestNumbers(_lotteryId, requestId_);\\n    }\\n\\n    function retryDrawWinningNumbers(uint256 _lotteryId, uint256 _seed) external onlyController notUpgraded {\\n        LottoInfo storage _currLotto = allLotteries_[_lotteryId];\\n        require(_currLotto.closingTimestamp <= getCurrentTime(), \\\"Cannot set winning numbers during lottery\\\");\\n        require(_currLotto.lotteryStatus == Status.Closed, \\\"Lottery State incorrect for retry\\\");\\n        requestId_ = randomGenerator_.getRandomNumber(_lotteryId, _seed);\\n        emit RequestNumbers(_lotteryId, requestId_);\\n    }\\n\\n    function numbersDrawn(\\n        uint256 _lotteryId,\\n        bytes32 _requestId,\\n        uint256 _randomNumber\\n    ) external onlyRandomGenerator() notUpgraded {\\n        LottoInfo storage _currLotto = allLotteries_[_lotteryId];\\n        require(_currLotto.lotteryStatus == Status.Closed, \\\"Draw numbers first\\\");\\n        if (requestId_ == _requestId) {\\n            _currLotto.winningNumbers = _split(_randomNumber);\\n            uint256[] memory matches = ticket_.countMatch(_lotteryId, maxValidRange_, _currLotto.winningNumbers);\\n            _currLotto.lotteryStatus = Status.Completed;\\n            uint256 _actualPrizeDistribution = 0;\\n            for (uint256 i = 0; i < _currLotto.prizeDistribution.length; i++) {\\n                _currLotto.winners[i] = matches[i];\\n                if (matches[i] > 0) {\\n                    _actualPrizeDistribution = _actualPrizeDistribution + _currLotto.prizeDistribution[i];\\n                }\\n            }\\n            uint256 _totalPrize = (getCurrentTotalPrize() * _actualPrizeDistribution) / PRECISION;\\n            if (_totalPrize > 0) {\\n                uint256 _taxAmount = (_totalPrize * taxRate_) / PRECISION;\\n                uint256 _prizeAfterTax = _totalPrize - _taxAmount;\\n                _addUnclaimedPrize(_prizeAfterTax);\\n                _collectTax(_taxAmount);\\n            }\\n        }\\n\\n        emit LotteryClosed(_lotteryId, ticket_.getTotalSupply());\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // General Access Functions\\n\\n    function batchBuyLottoTicket(\\n        uint256 _lotteryId,\\n        uint8 _numberOfTickets,\\n        uint16[] calldata _chosenNumbersForEachTicket\\n    ) external notContract() notUpgraded {\\n        // Ensuring the lottery is within a valid time\\n        uint256 currentTime = getCurrentTime();\\n        LottoInfo storage _currLotto = allLotteries_[_lotteryId];\\n        require(currentTime >= _currLotto.startingTimestamp, \\\"Invalid time for mint:start\\\");\\n        require(currentTime < _currLotto.closingTimestamp, \\\"Invalid time for mint:end\\\");\\n\\n        if (_currLotto.lotteryStatus == Status.NotStarted) {\\n            if (_currLotto.startingTimestamp <= getCurrentTime()) {\\n                _currLotto.lotteryStatus = Status.Open;\\n            }\\n        }\\n\\n        require(_currLotto.lotteryStatus == Status.Open, \\\"Lottery not in state for mint\\\");\\n        validateTicketNumbers(_numberOfTickets, _chosenNumbersForEachTicket);\\n        uint256 totalCost = this.costToBuyTickets(_lotteryId, _numberOfTickets);\\n\\n        // Batch mints the user their tickets\\n        uint256[] memory ticketIds =\\n            ticket_.batchMint(msg.sender, _lotteryId, _numberOfTickets, maxValidRange_, _chosenNumbersForEachTicket);\\n\\n        // Emitting event with all information\\n        emit NewBatchMint(msg.sender, ticketIds, _chosenNumbersForEachTicket, totalCost);\\n\\n        // Transfers the required iron to this contract\\n        iron_.safeTransferFrom(msg.sender, address(this), totalCost);\\n    }\\n\\n    function zapBatchBuyLottoTicket(\\n        uint256 _lotteryId,\\n        address _receiver,\\n        uint8 _numberOfTickets,\\n        uint16[] calldata _chosenNumbersForEachTicket\\n    ) external onlyZap notUpgraded {\\n        uint256 currentTime = getCurrentTime();\\n        LottoInfo storage _currLotto = allLotteries_[_lotteryId];\\n        require(currentTime >= _currLotto.startingTimestamp, \\\"Invalid time for mint:start\\\");\\n        require(currentTime < _currLotto.closingTimestamp, \\\"Invalid time for mint:end\\\");\\n        if (_currLotto.lotteryStatus == Status.NotStarted) {\\n            if (_currLotto.startingTimestamp <= getCurrentTime()) {\\n                _currLotto.lotteryStatus = Status.Open;\\n            }\\n        }\\n\\n        require(_currLotto.lotteryStatus == Status.Open, \\\"Lottery not in state for mint\\\");\\n        validateTicketNumbers(_numberOfTickets, _chosenNumbersForEachTicket);\\n        uint256 totalCost = this.costToBuyTickets(_lotteryId, _numberOfTickets);\\n\\n        // Batch mints the user their tickets\\n        uint256[] memory ticketIds = ticket_.batchMint(_receiver, _lotteryId, _numberOfTickets, maxValidRange_, _chosenNumbersForEachTicket);\\n\\n        // Emitting event with all information\\n        emit NewBatchMint(_receiver, ticketIds, _chosenNumbersForEachTicket, totalCost);\\n\\n        // Transfers the required iron to this contract\\n        iron_.safeTransferFrom(msg.sender, address(this), totalCost);\\n    }\\n\\n    function claimReward(uint256 _lotteryId, uint256 _tokenId) external notContract() {\\n        // Checking the lottery is in a valid time for claiming\\n        require(allLotteries_[_lotteryId].closingTimestamp <= getCurrentTime(), \\\"Wait till end to claim\\\");\\n        // Checks the lottery winning numbers are available\\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Completed, \\\"Winning Numbers not chosen yet\\\");\\n        require(ticket_.getOwnerOfTicket(_tokenId) == msg.sender, \\\"Only the owner can claim\\\");\\n        // Sets the claim of the ticket to true (if claimed, will revert)\\n        require(ticket_.claimTicket(_tokenId, _lotteryId), \\\"Numbers for ticket invalid\\\");\\n        // Getting the number of matching tickets\\n        uint8 matchingNumbers =\\n            _getNumberOfMatching(ticket_.getTicketNumbers(_tokenId), allLotteries_[_lotteryId].winningNumbers);\\n        // Getting the prize amount for those matching tickets\\n        uint256 prizeAmount = _prizeForMatching(matchingNumbers, _lotteryId);\\n        // Transfering the user their winnings\\n        _claimPrize(msg.sender, prizeAmount);\\n    }\\n\\n    function batchClaimRewards(uint256 _lotteryId, uint256[] calldata _tokeIds) external notContract() {\\n        require(_tokeIds.length <= 50, \\\"Batch claim too large\\\");\\n        // Checking the lottery is in a valid time for claiming\\n        require(allLotteries_[_lotteryId].closingTimestamp <= getCurrentTime(), \\\"Wait till end to claim\\\");\\n        // Checks the lottery winning numbers are available\\n        require(allLotteries_[_lotteryId].lotteryStatus == Status.Completed, \\\"Winning Numbers not chosen yet\\\");\\n        // Creates a storage for all winnings\\n        uint256 totalPrize = 0;\\n        // Loops through each submitted token\\n        for (uint256 i = 0; i < _tokeIds.length; i++) {\\n            // Checks user is owner (will revert entire call if not)\\n            require(ticket_.getOwnerOfTicket(_tokeIds[i]) == msg.sender, \\\"Only the owner can claim\\\");\\n            // If token has already been claimed, skip token\\n            if (ticket_.getTicketClaimStatus(_tokeIds[i])) {\\n                continue;\\n            }\\n            // Claims the ticket (will only revert if numbers invalid)\\n            require(ticket_.claimTicket(_tokeIds[i], _lotteryId), \\\"Numbers for ticket invalid\\\");\\n            // Getting the number of matching tickets\\n            uint8 matchingNumbers =\\n                _getNumberOfMatching(ticket_.getTicketNumbers(_tokeIds[i]), allLotteries_[_lotteryId].winningNumbers);\\n            // Getting the prize amount for those matching tickets\\n            uint256 prizeAmount = _prizeForMatching(matchingNumbers, _lotteryId);\\n            totalPrize = totalPrize + prizeAmount;\\n        }\\n        // Transferring the user their winnings\\n        _claimPrize(msg.sender, totalPrize);\\n    }\\n\\n    //-------------------------------------------------------------------------\\n    // INTERNAL FUNCTIONS\\n    //-------------------------------------------------------------------------\\n    /**\\n     * @param   _startingTimestamp The block timestamp for the beginning of the\\n     *          lottery.\\n     * @param   _closingTimestamp The block timestamp after which no more tickets\\n     *          will be sold for the lottery. Note that this timestamp MUST\\n     *          be after the starting block timestamp.\\n     */\\n    function _createNewLotto(uint256 _startingTimestamp, uint256 _closingTimestamp)\\n        internal\\n        notUpgraded\\n        returns (uint256 lotteryId)\\n    {\\n        require(_startingTimestamp != 0 && _startingTimestamp < _closingTimestamp, \\\"Timestamps for lottery invalid\\\");\\n        require(\\n            lotteryIdCounter_ == 0 || allLotteries_[lotteryIdCounter_].lotteryStatus == Status.Completed,\\n            \\\"current lottery is not completed\\\"\\n        );\\n        // Incrementing lottery ID\\n        lotteryIdCounter_ = lotteryIdCounter_ + 1;\\n        lotteryId = lotteryIdCounter_;\\n        uint16[] memory winningNumbers = new uint16[](sizeOfLottery_ + 1);\\n        uint256[] memory winnersCount = new uint256[](prizeDistribution_.length);\\n        Status lotteryStatus;\\n        if (_startingTimestamp > getCurrentTime()) {\\n            lotteryStatus = Status.NotStarted;\\n        } else {\\n            lotteryStatus = Status.Open;\\n        }\\n\\n        //transfer from reserve pool to poolPrize if current < minPrize\\n        if (getCurrentTotalPrize() < startingPrize_) {\\n            IPrizeReservePool(prizeReservePool_).fund(startingPrize_ - getCurrentTotalPrize());\\n        }\\n\\n        // Saving data in struct\\n        LottoInfo memory newLottery =\\n            LottoInfo(\\n                lotteryId,\\n                lotteryStatus,\\n                startingPrize_,\\n                costPerTicket_,\\n                prizeDistribution_,\\n                _startingTimestamp,\\n                _closingTimestamp,\\n                winningNumbers,\\n                winnersCount\\n            );\\n        allLotteries_[lotteryId] = newLottery;\\n\\n        // Emitting important information around new lottery.\\n        emit LotteryOpened(lotteryId, ticket_.getTotalSupply());\\n    }\\n\\n    function _getNumberOfMatching(uint16[] memory _usersNumbers, uint16[] memory _winningNumbers)\\n        internal\\n        pure\\n        returns (uint8 noOfMatching)\\n    {\\n        // Loops through all winning numbers\\n        for (uint256 i = 0; i < _winningNumbers.length - 1; i++) {\\n            for (uint256 j = 0; j < _usersNumbers.length - 1; j++) {\\n                // If the winning numbers and user numbers match\\n                if (_usersNumbers[i] == _winningNumbers[j]) {\\n                    // The number of matching numbers increases\\n                    noOfMatching += 1;\\n                }\\n            }\\n        }\\n\\n        // compare power number\\n        if (\\n            noOfMatching == sizeOfLottery_ &&\\n            _winningNumbers[_winningNumbers.length - 1] == _usersNumbers[_usersNumbers.length - 1]\\n        ) {\\n            noOfMatching += 1;\\n        }\\n    }\\n\\n    function _claimPrize(address _winner, uint256 _amount) internal {\\n        unclaimedPrize_ = unclaimedPrize_ - _amount;\\n        iron_.safeTransfer(_winner, _amount);\\n    }\\n\\n    function _addUnclaimedPrize(uint256 amount) internal {\\n        unclaimedPrize_ = unclaimedPrize_ + amount;\\n    }\\n\\n    function _collectTax(uint256 _taxAmount) internal {\\n        iron_.safeApprove(address(taxService_), 0);\\n        iron_.safeApprove(address(taxService_), _taxAmount);\\n        taxService_.collect(_taxAmount);\\n    }\\n\\n    /**\\n     * @param   _noOfMatching: The number of matching numbers the user has\\n     * @param   _lotteryId: The ID of the lottery the user is claiming on\\n     * @return  prize  The prize amount in cake the user is entitled to\\n     */\\n    function _prizeForMatching(uint8 _noOfMatching, uint256 _lotteryId) public view returns (uint256 prize) {\\n        prize = 0;\\n        if (_noOfMatching > 0) {\\n            // Getting the percentage of the pool the user has won\\n            uint256 prizeIndex = sizeOfLottery_ + 1 - _noOfMatching;\\n            uint256 perOfPool = allLotteries_[_lotteryId].prizeDistribution[prizeIndex];\\n            uint256 numberOfWinners = allLotteries_[_lotteryId].winners[prizeIndex];\\n\\n            if (numberOfWinners > 0) {\\n                prize =\\n                    (allLotteries_[_lotteryId].prizePool * perOfPool * (PRECISION - taxRate_)) /\\n                    numberOfWinners /\\n                    (PRECISION**2);\\n            }\\n        }\\n    }\\n\\n    function _split(uint256 _randomNumber) internal view returns (uint16[] memory) {\\n        uint16[] memory winningNumbers = new uint16[](sizeOfLottery_ + 1);\\n\\n        uint16[] memory array = new uint16[](maxValidRange_);\\n        for (uint16 i = 0; i < maxValidRange_; i++) {\\n            array[i] = i + 1;\\n        }\\n\\n        uint16 temp;\\n\\n        for (uint256 i = array.length - 1; i > 0; i--) {\\n            uint256 j = uint256(keccak256(abi.encodePacked(_randomNumber, i))) % i;\\n            temp = array[i];\\n            array[i] = array[j];\\n            array[j] = temp;\\n        }\\n\\n        for (uint256 i = 0; i < sizeOfLottery_; i++) {\\n            winningNumbers[i] = array[i];\\n        }\\n\\n        winningNumbers[sizeOfLottery_] = (uint16(_randomNumber) % powerBallRange_) + 1;\\n        return winningNumbers;\\n    }\\n\\n    function validateTicketNumbers(uint8 _numberOfTickets, uint16[] memory _numbers) internal view {\\n        require(_numberOfTickets <= 50, \\\"Batch mint too large\\\");\\n        require(_numbers.length == _numberOfTickets * (sizeOfLottery_ + 1), \\\"Invalid chosen numbers\\\");\\n\\n        for (uint256 i = 0; i < _numbers.length; i++) {\\n            uint256 k = i % (sizeOfLottery_ + 1);\\n            if (k == sizeOfLottery_) {\\n                require(_numbers[i] > 0 && _numbers[i] <= powerBallRange_, \\\"out of range: power number\\\");\\n            } else {\\n                require(_numbers[i] > 0 && _numbers[i] <= maxValidRange_, \\\"out of range: number\\\");\\n            }\\n            if (k > 0 && k != sizeOfLottery_) {\\n                for (uint256 j = i - k; j <= i - 1; j++) {\\n                    require(_numbers[i] != _numbers[j], \\\"duplicate number\\\");\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b466932ef8caca3030b778d94cbfe7c5008872ac1ffcf3a9778ea7768a5665d\",\"license\":\"MIT\"},\"contracts/interfaces/IPrizeReservePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IPrizeReservePool {\\n    /**\\n     * Funding a minimal amount when prize pool is empty\\n     * @param amount amount of IRON to be set as prize\\n     */\\n    function fund(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x9545a8bd62d242197e957bd2067ce1c20ae0767015b5ce87bacf48a306436dce\",\"license\":\"MIT\"},\"contracts/interfaces/IRandomNumberGenerator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface IRandomNumberGenerator {\\n\\n    /** \\n     * Requests randomness from a user-provided seed\\n     */\\n    function getRandomNumber(\\n        uint256 lotteryId,\\n        uint256 userProvidedSeed\\n    ) \\n        external \\n        returns (bytes32 requestId);\\n}\",\"keccak256\":\"0xe6e7fbdffc37455044a25227915988298b04c3f9008b02c594d8c9adfd792078\",\"license\":\"MIT\"},\"contracts/interfaces/ITaxService.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\ninterface ITaxService {\\n    /**\\n     * collect iron\\n     * @param amount amount of IRON\\n     */\\n    function collect(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x9741048d7c37baadcb08f0acf9d66dae65e00f5dc5dcf07b3246a9a59cfddbc9\",\"license\":\"MIT\"},\"contracts/interfaces/ITicket.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\ninterface ITicket {\\n    //-------------------------------------------------------------------------\\n    // VIEW FUNCTIONS\\n    //-------------------------------------------------------------------------\\n\\n    function getTotalSupply() external view returns (uint256);\\n\\n    function getTicketNumbers(uint256 _ticketID) external view returns (uint16[] memory);\\n\\n    function getOwnerOfTicket(uint256 _ticketID) external view returns (address);\\n\\n    function getTicketClaimStatus(uint256 _ticketID) external view returns (bool);\\n\\n    //-------------------------------------------------------------------------\\n    // STATE MODIFYING FUNCTIONS\\n    //-------------------------------------------------------------------------\\n\\n    function batchMint(\\n        address _to,\\n        uint256 _lottoID,\\n        uint8 _numberOfTickets,\\n        uint16 _maxValidRange,\\n        uint16[] calldata _numbers\\n    ) external returns (uint256[] memory);\\n\\n    function claimTicket(uint256 _ticketId, uint256 _lotteryId) external returns (bool);\\n\\n    function countMatch(\\n        uint256 _lotteryId,\\n        uint16 _maxValidRange,\\n        uint16[] calldata _winningNumbers\\n    ) external view returns (uint256[] memory results);\\n}\\n\",\"keccak256\":\"0x3dce2c8a8efd94902ff57983004981fcccc1f16d75034f6c985be86f23c931d5\",\"license\":\"MIT\"},\"contracts/utils/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.6.0 <= 0.8.4;\\n\\nimport \\\"./Timer.sol\\\";\\n\\n/**\\n * @title Base class that provides time overrides, but only if being run in test mode.\\n */\\nabstract contract Testable {\\n    // If the contract is being run on the test network, then `timerAddress` will be the 0x0 address.\\n    // Note: this variable should be set on construction and never modified.\\n    address public timerAddress;\\n\\n    /**\\n     * @notice Constructs the Testable contract. Called by child contracts.\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\n     * Must be set to 0x0 for production environments that use live time.\\n     */\\n    constructor(address _timerAddress) {\\n        timerAddress = _timerAddress;\\n    }\\n\\n    /**\\n     * @notice Reverts if not running in test mode.\\n     */\\n    modifier onlyIfTest {\\n        require(timerAddress != address(0x0));\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the current time.\\n     * @dev Will revert if not running in test mode.\\n     * @param time timestamp to set current Testable time to.\\n     */\\n    function setCurrentTime(uint256 time) external onlyIfTest {\\n        Timer(timerAddress).setCurrentTime(time);\\n    }\\n\\n    /**\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\n     * Otherwise, it will return the block timestamp.\\n     * @return uint for the current Testable timestamp.\\n     */\\n    function getCurrentTime() public view returns (uint256) {\\n        if (timerAddress != address(0x0)) {\\n            return Timer(timerAddress).getCurrentTime();\\n        } else {\\n            return block.timestamp;\\n        }\\n    }\\n}\",\"keccak256\":\"0x28bc87711e0af39072948275584a41f859720bc32a939cc96d35221f9a4b59e6\",\"license\":\"MIT\"},\"contracts/utils/Timer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.6.0 <= 0.8.4;\\n\\n/**\\n * @title Universal store of current contract time for testing environments.\\n */\\ncontract Timer {\\n    uint256 private currentTime;\\n\\n    constructor() {\\n        currentTime = block.timestamp; \\n    }\\n\\n    /**\\n     * @notice Sets the current time.\\n     * @dev Will revert if not running in test mode.\\n     * @param time timestamp to set `currentTime` to.\\n     */\\n    function setCurrentTime(uint256 time) external {\\n        currentTime = time;\\n    }\\n\\n    /**\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\n     * Otherwise, it will return the block timestamp.\\n     * @return uint256 for the current Testable timestamp.\\n     */\\n    function getCurrentTime() public view returns (uint256) {\\n        return currentTime;\\n    }\\n}\",\"keccak256\":\"0x0515fb9f71e0e78aaba321f9f2c7e186ef29246f2a6e96b02bd1fccccc86a558\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052620151806011556012805460ff191690553480156200002257600080fd5b50604051620054c9380380620054c98339810160408190526200004591620000ad565b600080546001600160a01b031916339081178255604051839282917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b0319166001600160a01b039290921691909117905550620000dd565b600060208284031215620000bf578081fd5b81516001600160a01b0381168114620000d6578182fd5b9392505050565b6153dc80620000ed6000396000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c80638788bc2911610167578063c000bc60116100ce578063e59bbab511610087578063e59bbab51461059f578063e5a92f91146105b2578063e94594e7146105bb578063e97fc162146105ce578063f2fde38b146105e1578063f7468d1f146105f457600080fd5b8063c000bc601461052d578063c6d69a3014610540578063c8cfd90214610553578063cc2a9a5b14610566578063da47675514610579578063dfcbb0641461058c57600080fd5b80639dae207d116101205780639dae207d146104e1578063a624aa1b146104f4578063a75ab57114610509578063aaf5eb6814610512578063afdcc28b1461051c578063bcfe282c1461052557600080fd5b80638788bc29146104795780638da5cb5b1461048e57806392eefe9b1461049f57806393d07568146104b257806396476fa9146104c55780639853bcb6146104d857600080fd5b80633aed3e141161020b578063621bc669116101c4578063621bc6691461041b5780636a8dfd3a1461042e578063715018a61461044357806376674b8f1461044b578063795ec5b91461045e57806386bb8f371461046657600080fd5b80633aed3e141461038a5780633de3621f1461039d5780633f343b2c146103ba5780634bc19fee146103e25780634f7d93db146103f55780635b99a4d61461040857600080fd5b80631b2104b71161025d5780631b2104b71461030b5780631b9a9afd146103365780631c39c38d146103495780631c65c78b1461035c57806322f8e5661461036f57806329cb924d1461038257600080fd5b8063075dc4151461029a5780630dabc1d4146102b957806318fb9c61146102ce5780631a0a916f146102ef5780631ad3548214610302575b600080fd5b6102a2600481565b60405160ff90911681526020015b60405180910390f35b6102cc6102c7366004614768565b610607565b005b6102e16102dc366004614768565b6107ef565b6040519081526020016102b0565b6102cc6102fd3660046143e3565b61082f565b6102e1600c5481565b600a5461031e906001600160a01b031681565b6040516001600160a01b0390911681526020016102b0565b6102cc6103443660046145fa565b6108a1565b60015461031e906001600160a01b031681565b6102cc61036a3660046143e3565b610b27565b6102cc61037d36600461466e565b610b99565b6102e1610c10565b60095461031e906001600160a01b031681565b6012546103aa9060ff1681565b60405190151581526020016102b0565b600a546103cf90600160b01b900461ffff1681565b60405161ffff90911681526020016102b0565b6102cc6103f03660046143e3565b610cb4565b6102e1610403366004614768565b610d26565b600f5461031e906001600160a01b031681565b6102cc6104293660046143e3565b610d4a565b610436610dbc565b6040516102b09190614bc5565b6102cc610fb5565b6102cc6104593660046146f4565b611029565b6102e16115c2565b6102cc610474366004614768565b61164c565b610481611a11565b6040516102b09190614933565b6000546001600160a01b031661031e565b6102cc6104ad3660046143e3565b611b41565b6102cc6104c0366004614686565b611bb3565b6102cc6104d3366004614768565b611f21565b6102e160085481565b6102e16104ef3660046147e0565b61205d565b600a546103cf90600160a01b900461ffff1681565b6102e1600b5481565b6102e1620f424081565b6102e160115481565b6102cc61217e565b6102cc61053b36600461466e565b612283565b6102cc61054e36600461466e565b6122f9565b6102cc610561366004614789565b61237b565b6102cc61057436600461441b565b6126cc565b61043661058736600461466e565b61289c565b6102cc61059a3660046143e3565b612a72565b600a54600160a01b900461ffff166103cf565b6102e1600e5481565b6102e16105c936600461466e565b612b16565b6102cc6105dc36600461473d565b612b37565b6102cc6105ef3660046143e3565b612f1a565b6102cc6106023660046143e3565b613004565b6009546001600160a01b0316331461063a5760405162461bcd60e51b8152600401610631906149e8565b60405180910390fd5b60125460ff161561065d5760405162461bcd60e51b815260040161063190614b8e565b6000828152601060205260409020610673610c10565b816006015411156106965760405162461bcd60e51b815260040161063190614b45565b60018082015460ff1660038111156106be57634e487b7160e01b600052602160045260246000fd5b1461070b5760405162461bcd60e51b815260206004820181905260248201527f4c6f747465727920537461746520696e636f727265637420666f7220647261776044820152606401610631565b60018101805460ff191660021790556107226115c2565b6002820155600480546040516337347e0560e11b8152918201859052602482018490526001600160a01b031690636e68fc0a906044015b602060405180830381600087803b15801561077357600080fd5b505af1158015610787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ab91906145e2565b60068190556040805185815260208101929092527ff8cdf8355a0f31bbad8998a631f5a75dcb3e475a010b34a111ed105fe88e751a910160405180910390a1505050565b6009546000906001600160a01b0316331461081c5760405162461bcd60e51b8152600401610631906149e8565b6108268383613076565b90505b92915050565b6000546001600160a01b031633146108595760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b03811661087f5760405162461bcd60e51b815260040161063190614aab565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146108cb5760405162461bcd60e51b815260040161063190614ae2565b60048661ffff16101561092a5760405162461bcd60e51b815260206004820152602160248201527f52616e6765206f66206e756d626572206d75737420626520342061746c6561736044820152601d60fa1b6064820152608401610631565b61ffff851661097b5760405162461bcd60e51b815260206004820152601f60248201527f506f776572206e756d6265722072616e67652063616e206e6f742062652030006044820152606401610631565b801580159061098957508115155b6109d55760405162461bcd60e51b815260206004820152601960248201527f5072697a65206f7220636f73742063616e6e6f742062652030000000000000006044820152606401610631565b6000805b84811015610a2757858582818110610a0157634e487b7160e01b600052603260045260246000fd5b9050602002013582610a1391906150ce565b915080610a1f816152ec565b9150506109d9565b50620f42408114610a7a5760405162461bcd60e51b815260206004820152601e60248201527f5072697a6520646973747269627574696f6e206973206e6f74203130302500006044820152606401610631565b600a805461ffff888116600160b01b0261ffff60b01b19918b16600160a01b029190911663ffffffff60a01b1990921691909117179055610abd600d86866141f8565b50600b829055600c839055600a546040517f067550c482e59ec2971e38a6fceb771fc31d75786daa4dbcc378a4ce3f2fbd6391610b169161ffff600160a01b8304811692600160b01b90041690600d9087908990614c65565b60405180910390a150505050505050565b6000546001600160a01b03163314610b515760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b038116610b775760405162461bcd60e51b815260040161063190614aab565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b0316610bae57600080fd5b60015460405163117c72b360e11b8152600481018390526001600160a01b03909116906322f8e566906024015b600060405180830381600087803b158015610bf557600080fd5b505af1158015610c09573d6000803e3d6000fd5b5050505050565b6001546000906001600160a01b031615610caf57600160009054906101000a90046001600160a01b03166001600160a01b03166329cb924d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7257600080fd5b505afa158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa91906145e2565b905090565b504290565b6000546001600160a01b03163314610cde5760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b038116610d045760405162461bcd60e51b815260040161063190614aab565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260106020526040812060030154610d42838261520d565b949350505050565b6000546001600160a01b03163314610d745760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b038116610d9a5760405162461bcd60e51b815260040161063190614aab565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b610dc4614243565b600060075411610de65760405162461bcd60e51b815260040161063190614a7f565b60075460009081526010602090815260409182902082516101208101909352805483526001810154909183019060ff166003811115610e3557634e487b7160e01b600052602160045260246000fd5b6003811115610e5457634e487b7160e01b600052602160045260246000fd5b8152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020018280548015610ebb57602002820191906000526020600020905b815481526020019060010190808311610ea7575b50505050508152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020018280548015610f4f57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610f165790505b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015610fa757602002820191906000526020600020905b815481526020019060010190808311610f93575b505050505081525050905090565b6000546001600160a01b03163314610fdf5760405162461bcd60e51b815260040161063190614ae2565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b333b156110485760405162461bcd60e51b815260040161063190614b17565b3332146110675760405162461bcd60e51b8152600401610631906149b1565b60328111156110b05760405162461bcd60e51b8152602060048201526015602482015274426174636820636c61696d20746f6f206c6172676560581b6044820152606401610631565b6110b8610c10565b60008481526010602052604090206006015411156111115760405162461bcd60e51b8152602060048201526016602482015275576169742074696c6c20656e6420746f20636c61696d60501b6044820152606401610631565b600360008481526010602052604090206001015460ff16600381111561114757634e487b7160e01b600052602160045260246000fd5b146111945760405162461bcd60e51b815260206004820152601e60248201527f57696e6e696e67204e756d62657273206e6f742063686f73656e2079657400006044820152606401610631565b6000805b828110156115b15760035433906001600160a01b0316639d7553678686858181106111d357634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016111f891815260200190565b60206040518083038186803b15801561121057600080fd5b505afa158015611224573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124891906143ff565b6001600160a01b0316146112995760405162461bcd60e51b81526020600482015260186024820152774f6e6c7920746865206f776e65722063616e20636c61696d60401b6044820152606401610631565b6003546001600160a01b0316639191a7ea8585848181106112ca57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016112ef91815260200190565b60206040518083038186803b15801561130757600080fd5b505afa15801561131b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133f91906145c2565b156113495761159f565b6003546001600160a01b031663ed06a74085858481811061137a57634e487b7160e01b600052603260045260246000fd5b90506020020135876040518363ffffffff1660e01b81526004016113a8929190918252602082015260400190565b602060405180830381600087803b1580156113c257600080fd5b505af11580156113d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fa91906145c2565b6114465760405162461bcd60e51b815260206004820152601a60248201527f4e756d6265727320666f72207469636b657420696e76616c69640000000000006044820152606401610631565b600354600090611580906001600160a01b0316639839eafd87878681811061147e57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016114a391815260200190565b60006040518083038186803b1580156114bb57600080fd5b505afa1580156114cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114f7919081019061449c565b6000888152601060209081526040918290206007018054835181840281018401909452808452909183018282801561157657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161153d5790505b505050505061354c565b9050600061158e828861205d565b905061159a81856150ce565b935050505b806115a9816152ec565b915050611198565b506115bc33826136a1565b50505050565b6008546002546040516370a0823160e01b8152306004820152600092916001600160a01b0316906370a082319060240160206040518083038186803b15801561160a57600080fd5b505afa15801561161e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164291906145e2565b610caa919061524d565b333b1561166b5760405162461bcd60e51b815260040161063190614b17565b33321461168a5760405162461bcd60e51b8152600401610631906149b1565b611692610c10565b60008381526010602052604090206006015411156116eb5760405162461bcd60e51b8152602060048201526016602482015275576169742074696c6c20656e6420746f20636c61696d60501b6044820152606401610631565b600360008381526010602052604090206001015460ff16600381111561172157634e487b7160e01b600052602160045260246000fd5b1461176e5760405162461bcd60e51b815260206004820152601e60248201527f57696e6e696e67204e756d62657273206e6f742063686f73656e2079657400006044820152606401610631565b600354604051639d75536760e01b81526004810183905233916001600160a01b031690639d7553679060240160206040518083038186803b1580156117b257600080fd5b505afa1580156117c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ea91906143ff565b6001600160a01b03161461183b5760405162461bcd60e51b81526020600482015260186024820152774f6e6c7920746865206f776e65722063616e20636c61696d60401b6044820152606401610631565b6003546040516303b41a9d60e61b815260048101839052602481018490526001600160a01b039091169063ed06a74090604401602060405180830381600087803b15801561188857600080fd5b505af115801561189c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c091906145c2565b61190c5760405162461bcd60e51b815260206004820152601a60248201527f4e756d6265727320666f72207469636b657420696e76616c69640000000000006044820152606401610631565b600354604051639839eafd60e01b8152600481018390526000916119f7916001600160a01b0390911690639839eafd9060240160006040518083038186803b15801561195757600080fd5b505afa15801561196b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611993919081019061449c565b60008581526010602090815260409182902060070180548351818402810184019094528084529091830182828015611576576000918252602091829020805461ffff16845290820283019290916002910180841161153d579050505050505061354c565b90506000611a05828561205d565b90506115bc33826136a1565b6060600060075411611a355760405162461bcd60e51b815260040161063190614a7f565b600754600090815260106020526040902060048101546001600160401b03811115611a7057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611a99578160200160208202803683370190505b5091506000611aa66115c2565b905060005b6004830154811015611b3b57620f4240836004018281548110611ade57634e487b7160e01b600052603260045260246000fd5b906000526020600020015483611af4919061520d565b611afe919061510b565b848281518110611b1e57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611b33816152ec565b915050611aab565b50505090565b6000546001600160a01b03163314611b6b5760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b038116611b915760405162461bcd60e51b815260040161063190614aab565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b600a546001600160a01b03163314611c0d5760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c79207a61702066756e6374696f6e2063616e2063616c6c0000000000006044820152606401610631565b60125460ff1615611c305760405162461bcd60e51b815260040161063190614b8e565b6000611c3a610c10565b6000878152601060205260409020600581015491925090821015611c705760405162461bcd60e51b815260040161063190614a11565b80600601548210611c935760405162461bcd60e51b815260040161063190614a48565b6000600182015460ff166003811115611cbc57634e487b7160e01b600052602160045260246000fd5b1415611ce557611cca610c10565b816005015411611ce5576001818101805460ff191690911790555b60018082015460ff166003811115611d0d57634e487b7160e01b600052602160045260246000fd5b14611d5a5760405162461bcd60e51b815260206004820152601d60248201527f4c6f7474657279206e6f7420696e20737461746520666f72206d696e740000006044820152606401610631565b611d97858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506136c992505050565b604051634f7d93db60e01b81526004810188905260ff861660248201526000903090634f7d93db9060440160206040518083038186803b158015611dda57600080fd5b505afa158015611dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1291906145e2565b600354600a5460405163dad97f0960e01b81529293506000926001600160a01b039092169163dad97f0991611e5f918c918e918d91600160a01b900461ffff16908d908d906004016148ec565b600060405180830381600087803b158015611e7957600080fd5b505af1158015611e8d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611eb5919081019061453c565b9050876001600160a01b03167f974e689131c5193e06c220e7ac3790b09bf22516da5ecd32834e19fb8a8299ed82888886604051611ef69493929190614946565b60405180910390a2600254611f16906001600160a01b0316333085613a2a565b505050505050505050565b6009546001600160a01b03163314611f4b5760405162461bcd60e51b8152600401610631906149e8565b60125460ff1615611f6e5760405162461bcd60e51b815260040161063190614b8e565b6000828152601060205260409020611f84610c10565b81600601541115611fa75760405162461bcd60e51b815260040161063190614b45565b6002600182015460ff166003811115611fd057634e487b7160e01b600052602160045260246000fd5b146120275760405162461bcd60e51b815260206004820152602160248201527f4c6f747465727920537461746520696e636f727265637420666f7220726574726044820152607960f81b6064820152608401610631565b600480546040516337347e0560e11b8152918201859052602482018490526001600160a01b031690636e68fc0a90604401610759565b600060ff83161561082957600083612077600460016150e6565b6120819190615264565b60ff16905060006010600085815260200190815260200160002060040182815481106120bd57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050600060106000868152602001908152602001600020600801838154811061210157634e487b7160e01b600052603260045260246000fd5b906000526020600020015490506000811115612175576121256002620f4240615162565b81600e54620f4240612137919061524d565b60008881526010602052604090206002015461215490869061520d565b61215e919061520d565b612168919061510b565b612172919061510b565b93505b50505092915050565b6009546001600160a01b031633146121a85760405162461bcd60e51b8152600401610631906149e8565b6000600754116121ca5760405162461bcd60e51b815260040161063190614a7f565b6007546000908152601060205260408120906121e4610c10565b9050816005015481101561220a5760405162461bcd60e51b815260040161063190614a11565b8160060154811061222d5760405162461bcd60e51b815260040161063190614a48565b6000600183015460ff16600381111561225657634e487b7160e01b600052602160045260246000fd5b141561227f57612264610c10565b82600501541161227f576001828101805460ff191690911790555b5050565b6000546001600160a01b031633146122ad5760405162461bcd60e51b815260040161063190614ae2565b600081116122f45760405162461bcd60e51b815260206004820152601460248201527304475726174696f6e2063616e6e6f7420626520360641b6044820152606401610631565b601155565b6000546001600160a01b031633146123235760405162461bcd60e51b815260040161063190614ae2565b620f42408111156123765760405162461bcd60e51b815260206004820152601a60248201527f746f74616c206d757374206c6f776572207468616e20313030250000000000006044820152606401610631565b600e55565b333b1561239a5760405162461bcd60e51b815260040161063190614b17565b3332146123b95760405162461bcd60e51b8152600401610631906149b1565b60125460ff16156123dc5760405162461bcd60e51b815260040161063190614b8e565b60006123e6610c10565b600086815260106020526040902060058101549192509082101561241c5760405162461bcd60e51b815260040161063190614a11565b8060060154821061243f5760405162461bcd60e51b815260040161063190614a48565b6000600182015460ff16600381111561246857634e487b7160e01b600052602160045260246000fd5b141561249157612476610c10565b816005015411612491576001818101805460ff191690911790555b60018082015460ff1660038111156124b957634e487b7160e01b600052602160045260246000fd5b146125065760405162461bcd60e51b815260206004820152601d60248201527f4c6f7474657279206e6f7420696e20737461746520666f72206d696e740000006044820152606401610631565b612543858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506136c992505050565b604051634f7d93db60e01b81526004810187905260ff861660248201526000903090634f7d93db9060440160206040518083038186803b15801561258657600080fd5b505afa15801561259a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125be91906145e2565b600354600a5460405163dad97f0960e01b81529293506000926001600160a01b039092169163dad97f099161260b9133918d918d91600160a01b900461ffff16908d908d906004016148ec565b600060405180830381600087803b15801561262557600080fd5b505af1158015612639573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612661919081019061453c565b9050336001600160a01b03167f974e689131c5193e06c220e7ac3790b09bf22516da5ecd32834e19fb8a8299ed828888866040516126a29493929190614946565b60405180910390a26002546126c2906001600160a01b0316333085613a2a565b5050505050505050565b600054600160a81b900460ff16806126ee5750600054600160a01b900460ff16155b6127515760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610631565b600054600160a81b900460ff1615801561277b576000805461ffff60a01b191661010160a01b1790555b6000546001600160a01b031633146127a55760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b038616158015906127c557506001600160a01b03851615155b80156127d957506001600160a01b03841615155b80156127ed57506001600160a01b03831615155b801561280157506001600160a01b03871615155b61281d5760405162461bcd60e51b815260040161063190614aab565b600280546001600160a01b03199081166001600160a01b038a811691909117909255600380548216898416179055600480548216888416179055600f80548216878416179055600580548216868416179055600980549091169184169190911790558015612893576000805460ff60a81b191690555b50505050505050565b6128a4614243565b60008281526010602090815260409182902082516101208101909352805483526001810154909183019060ff1660038111156128f057634e487b7160e01b600052602160045260246000fd5b600381111561290f57634e487b7160e01b600052602160045260246000fd5b815260200160028201548152602001600382015481526020016004820180548060200260200160405190810160405280929190818152602001828054801561297657602002820191906000526020600020905b815481526020019060010190808311612962575b50505050508152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020018280548015612a0a57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116129d15790505b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015612a6257602002820191906000526020600020905b815481526020019060010190808311612a4e575b5050505050815250509050919050565b6000546001600160a01b03163314612a9c5760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b038116612ae55760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a590818dbdb9d1c9858dd60821b6044820152606401610631565b6000612aef6115c2565b6012805460ff1916600117905560025490915061227f906001600160a01b03168383613a95565b600d8181548110612b2657600080fd5b600091825260209091200154905081565b6004546001600160a01b03163314612b895760405162461bcd60e51b815260206004820152601560248201527427b7363c903930b73237b69033b2b732b930ba37b960591b6044820152606401610631565b60125460ff1615612bac5760405162461bcd60e51b815260040161063190614b8e565b60008381526010602052604090206002600182015460ff166003811115612be357634e487b7160e01b600052602160045260246000fd5b14612c255760405162461bcd60e51b8152602060048201526012602482015271111c985dc81b9d5b58995c9cc8199a5c9cdd60721b6044820152606401610631565b826006541415612e5457612c3882613ac5565b8051612c4e916007840191602090910190614290565b50600354600a546040516342c9851760e11b81526000926001600160a01b0316916385930a2e91612c95918991600160a01b90910461ffff16906007880190600401614ccf565b60006040518083038186803b158015612cad57600080fd5b505afa158015612cc1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ce9919081019061453c565b60018301805460ff1916600317905590506000805b6004840154811015612de157828181518110612d2a57634e487b7160e01b600052603260045260246000fd5b6020026020010151846008018281548110612d5557634e487b7160e01b600052603260045260246000fd5b90600052602060002001819055506000838281518110612d8557634e487b7160e01b600052603260045260246000fd5b60200260200101511115612dcf57836004018181548110612db657634e487b7160e01b600052603260045260246000fd5b906000526020600020015482612dcc91906150ce565b91505b80612dd9816152ec565b915050612cfe565b506000620f424082612df16115c2565b612dfb919061520d565b612e05919061510b565b90508015612e50576000620f4240600e5483612e21919061520d565b612e2b919061510b565b90506000612e39828461524d565b9050612e4481613e08565b612e4d82613e1c565b50505b5050505b7f222f4196142d697de78db701f612253db29adeea22a556e89924693a1cbd297e84600360009054906101000a90046001600160a01b03166001600160a01b031663c4e41b226040518163ffffffff1660e01b815260040160206040518083038186803b158015612ec457600080fd5b505afa158015612ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612efc91906145e2565b6040805192835260208301919091520160405180910390a150505050565b6000546001600160a01b03163314612f445760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b038116612fa95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610631565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461302e5760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b0381166130545760405162461bcd60e51b815260040161063190614aab565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60125460009060ff161561309c5760405162461bcd60e51b815260040161063190614b8e565b82158015906130aa57508183105b6130f65760405162461bcd60e51b815260206004820152601e60248201527f54696d657374616d707320666f72206c6f747465727920696e76616c696400006044820152606401610631565b600754158061313b5750600360075460009081526010602052604090206001015460ff16600381111561313957634e487b7160e01b600052602160045260246000fd5b145b6131875760405162461bcd60e51b815260206004820181905260248201527f63757272656e74206c6f7474657279206973206e6f7420636f6d706c657465646044820152606401610631565b6007546131959060016150ce565b6007819055905060006131aa600460016150e6565b60ff166001600160401b038111156131d257634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156131fb578160200160208202803683370190505b50600d549091506000906001600160401b0381111561322a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613253578160200160208202803683370190505b5090506000613260610c10565b86111561326f57506000613273565b5060015b600b5461327e6115c2565b10156132fb57600f546001600160a01b031663ca1d209d61329d6115c2565b600b546132aa919061524d565b6040518263ffffffff1660e01b81526004016132c891815260200190565b600060405180830381600087803b1580156132e257600080fd5b505af11580156132f6573d6000803e3d6000fd5b505050505b600060405180610120016040528086815260200183600381111561332f57634e487b7160e01b600052602160045260246000fd5b8152602001600b548152602001600c548152602001600d80548060200260200160405190810160405280929190818152602001828054801561339057602002820191906000526020600020905b81548152602001906001019080831161337c575b5050505050815260200188815260200187815260200185815260200184815250905080601060008781526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083600381111561340857634e487b7160e01b600052602160045260246000fd5b021790555060408201516002820155606082015160038201556080820151805161343c916004840191602090910190614334565b5060a0820151600582015560c0820151600682015560e0820151805161346c916007840191602090910190614290565b506101008201518051613489916008840191602090910190614334565b5050600354604080516362720d9160e11b815290517fc13b64098dba6f1b221547b6e972533af47812e37968a7abbff8c0e60ff58cba935088926001600160a01b03169163c4e41b22916004808301926020929190829003018186803b1580156134f257600080fd5b505afa158015613506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352a91906145e2565b6040805192835260208301919091520160405180910390a15050505092915050565b6000805b6001835161355e919061524d565b81101561360e5760005b60018551613576919061524d565b8110156135fb5783818151811061359d57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff168583815181106135c957634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1614156135e9576135e66001846150e6565b92505b806135f3816152ec565b915050613568565b5080613606816152ec565b915050613550565b5060ff811660041480156136915750826001845161362c919061524d565b8151811061364a57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff168260018451613665919061524d565b8151811061368357634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16145b15610829576108266001826150e6565b806008546136af919061524d565b60085560025461227f906001600160a01b03168383613a95565b60328260ff1611156137145760405162461bcd60e51b81526020600482015260146024820152734261746368206d696e7420746f6f206c6172676560601b6044820152606401610631565b613720600460016150e6565b61372a908361522c565b60ff168151146137755760405162461bcd60e51b8152602060048201526016602482015275496e76616c69642063686f73656e206e756d6265727360501b6044820152606401610631565b60005b8151811015613a2557600061378f600460016150e6565b61379c9060ff1683615328565b905060048114156138725760008383815181106137c957634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff161180156138215750600a60169054906101000a900461ffff1661ffff1683838151811061381257634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1611155b61386d5760405162461bcd60e51b815260206004820152601a60248201527f6f7574206f662072616e67653a20706f776572206e756d6265720000000000006044820152606401610631565b61392f565b600083838151811061389457634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff161180156138ec5750600a60149054906101000a900461ffff1661ffff168383815181106138dd57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1611155b61392f5760405162461bcd60e51b815260206004820152601460248201527337baba1037b3103930b733b29d10373ab6b132b960611b6044820152606401610631565b600081118015613940575060048114155b15613a12576000613951828461524d565b90505b61395f60018461524d565b8111613a105783818151811061398557634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff168484815181106139b157634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1614156139fe5760405162461bcd60e51b815260206004820152601060248201526f323ab83634b1b0ba3290373ab6b132b960811b6044820152606401610631565b80613a08816152ec565b915050613954565b505b5080613a1d816152ec565b915050613778565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526115bc9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613e88565b6040516001600160a01b038316602482015260448101829052613a2590849063a9059cbb60e01b90606401613a5e565b60606000613ad5600460016150e6565b60ff166001600160401b03811115613afd57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613b26578160200160208202803683370190505b50600a54909150600090600160a01b900461ffff166001600160401b03811115613b6057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613b89578160200160208202803683370190505b50905060005b600a5461ffff600160a01b90910481169082161015613bfc57613bb38160016150a8565b828261ffff1681518110613bd757634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280613bf4816152ca565b915050613b8f565b5060008060018351613c0e919061524d565b90505b8015613d2a576000818783604051602001613c36929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c613c599190615328565b9050838281518110613c7b57634e487b7160e01b600052603260045260246000fd5b60200260200101519250838181518110613ca557634e487b7160e01b600052603260045260246000fd5b6020026020010151848381518110613ccd57634e487b7160e01b600052603260045260246000fd5b602002602001019061ffff16908161ffff168152505082848281518110613d0457634e487b7160e01b600052603260045260246000fd5b61ffff909216602092830291909101909101525080613d22816152b3565b915050613c11565b5060005b6004811015613da457828181518110613d5757634e487b7160e01b600052603260045260246000fd5b6020026020010151848281518110613d7f57634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280613d9c816152ec565b915050613d2e565b50600a54613dbd90600160b01b900461ffff1686615307565b613dc89060016150a8565b83600460ff1681518110613dec57634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015250909392505050565b80600854613e1691906150ce565b60085550565b600554600254613e3a916001600160a01b0391821691166000613f5a565b600554600254613e57916001600160a01b03918216911683613f5a565b60055460405163ce3f865f60e01b8152600481018390526001600160a01b039091169063ce3f865f90602401610bdb565b6000613edd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661407e9092919063ffffffff16565b805190915015613a255780806020019051810190613efb91906145c2565b613a255760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610631565b801580613fe35750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015613fa957600080fd5b505afa158015613fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fe191906145e2565b155b61404e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610631565b6040516001600160a01b038316602482015260448101829052613a2590849063095ea7b360e01b90606401613a5e565b606061408d8484600085614097565b90505b9392505050565b6060824710156140f85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610631565b843b6141465760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610631565b600080866001600160a01b0316858760405161416291906148d0565b60006040518083038185875af1925050503d806000811461419f576040519150601f19603f3d011682016040523d82523d6000602084013e6141a4565b606091505b50915091506141b48282866141bf565b979650505050505050565b606083156141ce575081614090565b8251156141de5782518084602001fd5b8160405162461bcd60e51b8152600401610631919061497e565b828054828255906000526020600020908101928215614233579160200282015b82811115614233578235825591602001919060010190614218565b5061423f92915061436f565b5090565b604080516101208101909152600080825260208201908152602001600081526020016000815260200160608152602001600081526020016000815260200160608152602001606081525090565b82805482825590600052602060002090600f016010900481019282156142335791602002820160005b838211156142f957835183826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026142b9565b80156143275782816101000a81549061ffff02191690556002016020816001010492830192600103026142f9565b505061423f92915061436f565b828054828255906000526020600020908101928215614233579160200282015b82811115614233578251825591602001919060010190614354565b5b8082111561423f5760008155600101614370565b60008083601f840112614395578182fd5b5081356001600160401b038111156143ab578182fd5b6020830191508360208260051b85010111156143c657600080fd5b9250929050565b803560ff811681146143de57600080fd5b919050565b6000602082840312156143f4578081fd5b81356140908161537e565b600060208284031215614410578081fd5b81516140908161537e565b60008060008060008060c08789031215614433578182fd5b863561443e8161537e565b9550602087013561444e8161537e565b9450604087013561445e8161537e565b9350606087013561446e8161537e565b9250608087013561447e8161537e565b915060a087013561448e8161537e565b809150509295509295509295565b600060208083850312156144ae578182fd5b82516001600160401b038111156144c3578283fd5b8301601f810185136144d3578283fd5b80516144e66144e182615085565b615055565b80828252848201915084840188868560051b8701011115614505578687fd5b8694505b8385101561453057805161451c81615396565b835260019490940193918501918501614509565b50979650505050505050565b6000602080838503121561454e578182fd5b82516001600160401b03811115614563578283fd5b8301601f81018513614573578283fd5b80516145816144e182615085565b80828252848201915084840188868560051b87010111156145a0578687fd5b8694505b838510156145305780518352600194909401939185019185016145a4565b6000602082840312156145d3578081fd5b81518015158114614090578182fd5b6000602082840312156145f3578081fd5b5051919050565b60008060008060008060a08789031215614612578182fd5b863561461d81615396565b9550602087013561462d81615396565b945060408701356001600160401b03811115614647578283fd5b61465389828a01614384565b979a9699509760608101359660809091013595509350505050565b60006020828403121561467f578081fd5b5035919050565b60008060008060006080868803121561469d578283fd5b8535945060208601356146af8161537e565b93506146bd604087016143cd565b925060608601356001600160401b038111156146d7578182fd5b6146e388828901614384565b969995985093965092949392505050565b600080600060408486031215614708578081fd5b8335925060208401356001600160401b03811115614724578182fd5b61473086828701614384565b9497909650939450505050565b600080600060608486031215614751578081fd5b505081359360208301359350604090920135919050565b6000806040838503121561477a578182fd5b50508035926020909101359150565b6000806000806060858703121561479e578182fd5b843593506147ae602086016143cd565b925060408501356001600160401b038111156147c8578283fd5b6147d487828801614384565b95989497509550505050565b600080604083850312156147f2578182fd5b6147fb836143cd565b946020939093013593505050565b81835260006020808501945082825b8581101561484157813561482b81615396565b61ffff1687529582019590820190600101614818565b509495945050505050565b6000815180845260208085019450808401835b8381101561484157815161ffff168752958201959082019060010161485f565b6000815180845260208085019450808401835b8381101561484157815187529582019590820190600101614892565b600481106148cc57634e487b7160e01b600052602160045260246000fd5b9052565b600082516148e2818460208701615287565b9190910192915050565b60018060a01b038716815285602082015260ff8516604082015261ffff8416606082015260a06080820152600061492760a083018486614809565b98975050505050505050565b602081526000610826602083018461487f565b606081526000614959606083018761487f565b828103602084015261496c818688614809565b91505082604083015295945050505050565b602081526000825180602084015261499d816040850160208701615287565b601f01601f19169190910160400192915050565b6020808252601a908201527f70726f787920636f6e7472616374206e6f7420616c6c6f776564000000000000604082015260600190565b6020808252600f908201526e27b7363c9031b7b73a3937b63632b960891b604082015260600190565b6020808252601b908201527f496e76616c69642074696d6520666f72206d696e743a73746172740000000000604082015260600190565b60208082526019908201527f496e76616c69642074696d6520666f72206d696e743a656e6400000000000000604082015260600190565b6020808252601290820152711b9bc81b1bdd1d195c9e4818dc99585d195960721b604082015260600190565b6020808252601d908201527f436f6e7472616374732063616e6e6f7420626520302061646472657373000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526014908201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604082015260600190565b60208082526029908201527f43616e6e6f74207365742077696e6e696e67206e756d6265727320647572696e60408201526867206c6f747465727960b81b606082015260800190565b6020808252601a908201527f5468697320636f6e747261637420776173207570677261646564000000000000604082015260600190565b602081528151602082015260006020830151614be460408401826148ae565b50604083015160608301526060830151608083015260808301516101208060a0850152614c1561014085018361487f565b915060a085015160c085015260c085015160e085015260e0850151601f19610100818786030181880152614c49858461484c565b908801518782039092018488015293509050612172838261487f565b600060a0820161ffff808916845260208189168186015260a06040860152829150875480845260c0860192508885528185209350845b81811015614cb757845484526001948501949383019301614c9b565b50505060608401959095525050608001529392505050565b60006060808301868452602061ffff8088168287015260408481880152838854614cfd818790815260200190565b60008b81526020902096509150875b81600f82011015614e4d57865461ffff868216168452614d36878501878360101c1661ffff169052565b61ffff81881c87161684860152614d57898501878360301c1661ffff169052565b6080614d6c8186018884891c1661ffff169052565b60a0614d82818701898560501c1661ffff169052565b60c0614d978188018a868f1c1661ffff169052565b60e0614dad8189018b8760701c1661ffff169052565b61ffff85851c8b1616610100890152614dd261012089018b8760901c1661ffff169052565b61ffff85841c8b1616610140890152614df761016089018b8760b01c1661ffff169052565b61ffff85831c8b1616610180890152614e1c6101a089018b8760d01c1661ffff169052565b84901c891661ffff166101c088015250505060f01c6101e08401526001969096019561020090920191601001614d0c565b95549581811015614e695761ffff878616168352918501916001015b81811015614e8b57614e8383868960101c1661ffff169052565b918501916001015b81811015614ea65761ffff87871c8616168352918501916001015b81811015614ec857614ec083868960301c1661ffff169052565b918501916001015b81811015614ee35761ffff87851c8616168352918501916001015b81811015614f0557614efd83868960501c1661ffff169052565b918501916001015b81811015614f205761ffff87891c8616168352918501916001015b81811015614f4257614f3a83868960701c1661ffff169052565b918501916001015b81811015614f6457614f5c83868960801c1661ffff169052565b918501916001015b81811015614f8657614f7e83868960901c1661ffff169052565b918501916001015b81811015614fa857614fa083868960a01c1661ffff169052565b918501916001015b81811015614fca57614fc283868960b01c1661ffff169052565b918501916001015b81811015614fec57614fe483868960c01c1661ffff169052565b918501916001015b8181101561500e5761500683868960d01c1661ffff169052565b918501916001015b818110156150305761502883868960e01c1661ffff169052565b918501916001015b818110156150445760f087901c8352918501915b50909b9a5050505050505050505050565b604051601f8201601f191681016001600160401b038111828210171561507d5761507d615368565b604052919050565b60006001600160401b0382111561509e5761509e615368565b5060051b60200190565b600061ffff8083168185168083038211156150c5576150c561533c565b01949350505050565b600082198211156150e1576150e161533c565b500190565b600060ff821660ff84168060ff038211156151035761510361533c565b019392505050565b60008261511a5761511a615352565b500490565b600181815b8085111561515a5781600019048211156151405761514061533c565b8085161561514d57918102915b93841c9390800290615124565b509250929050565b600061082660ff84168360008261517b57506001610829565b8161518857506000610829565b816001811461519e57600281146151a8576151c4565b6001915050610829565b60ff8411156151b9576151b961533c565b50506001821b610829565b5060208310610133831016604e8410600b84101617156151e7575081810a610829565b6151f1838361511f565b80600019048211156152055761520561533c565b029392505050565b60008160001904831182151516156152275761522761533c565b500290565b600060ff821660ff84168160ff04811182151516156152055761520561533c565b60008282101561525f5761525f61533c565b500390565b600060ff821660ff84168082101561527e5761527e61533c565b90039392505050565b60005b838110156152a257818101518382015260200161528a565b838111156115bc5750506000910152565b6000816152c2576152c261533c565b506000190190565b600061ffff808316818114156152e2576152e261533c565b6001019392505050565b60006000198214156153005761530061533c565b5060010190565b600061ffff8084168061531c5761531c615352565b92169190910692915050565b60008261533757615337615352565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461539357600080fd5b50565b61ffff8116811461539357600080fdfea26469706673582212205c5ac17f7a86c5539b08a639a025de248dd535c0830d10a2df66414771dff8d664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c80638788bc2911610167578063c000bc60116100ce578063e59bbab511610087578063e59bbab51461059f578063e5a92f91146105b2578063e94594e7146105bb578063e97fc162146105ce578063f2fde38b146105e1578063f7468d1f146105f457600080fd5b8063c000bc601461052d578063c6d69a3014610540578063c8cfd90214610553578063cc2a9a5b14610566578063da47675514610579578063dfcbb0641461058c57600080fd5b80639dae207d116101205780639dae207d146104e1578063a624aa1b146104f4578063a75ab57114610509578063aaf5eb6814610512578063afdcc28b1461051c578063bcfe282c1461052557600080fd5b80638788bc29146104795780638da5cb5b1461048e57806392eefe9b1461049f57806393d07568146104b257806396476fa9146104c55780639853bcb6146104d857600080fd5b80633aed3e141161020b578063621bc669116101c4578063621bc6691461041b5780636a8dfd3a1461042e578063715018a61461044357806376674b8f1461044b578063795ec5b91461045e57806386bb8f371461046657600080fd5b80633aed3e141461038a5780633de3621f1461039d5780633f343b2c146103ba5780634bc19fee146103e25780634f7d93db146103f55780635b99a4d61461040857600080fd5b80631b2104b71161025d5780631b2104b71461030b5780631b9a9afd146103365780631c39c38d146103495780631c65c78b1461035c57806322f8e5661461036f57806329cb924d1461038257600080fd5b8063075dc4151461029a5780630dabc1d4146102b957806318fb9c61146102ce5780631a0a916f146102ef5780631ad3548214610302575b600080fd5b6102a2600481565b60405160ff90911681526020015b60405180910390f35b6102cc6102c7366004614768565b610607565b005b6102e16102dc366004614768565b6107ef565b6040519081526020016102b0565b6102cc6102fd3660046143e3565b61082f565b6102e1600c5481565b600a5461031e906001600160a01b031681565b6040516001600160a01b0390911681526020016102b0565b6102cc6103443660046145fa565b6108a1565b60015461031e906001600160a01b031681565b6102cc61036a3660046143e3565b610b27565b6102cc61037d36600461466e565b610b99565b6102e1610c10565b60095461031e906001600160a01b031681565b6012546103aa9060ff1681565b60405190151581526020016102b0565b600a546103cf90600160b01b900461ffff1681565b60405161ffff90911681526020016102b0565b6102cc6103f03660046143e3565b610cb4565b6102e1610403366004614768565b610d26565b600f5461031e906001600160a01b031681565b6102cc6104293660046143e3565b610d4a565b610436610dbc565b6040516102b09190614bc5565b6102cc610fb5565b6102cc6104593660046146f4565b611029565b6102e16115c2565b6102cc610474366004614768565b61164c565b610481611a11565b6040516102b09190614933565b6000546001600160a01b031661031e565b6102cc6104ad3660046143e3565b611b41565b6102cc6104c0366004614686565b611bb3565b6102cc6104d3366004614768565b611f21565b6102e160085481565b6102e16104ef3660046147e0565b61205d565b600a546103cf90600160a01b900461ffff1681565b6102e1600b5481565b6102e1620f424081565b6102e160115481565b6102cc61217e565b6102cc61053b36600461466e565b612283565b6102cc61054e36600461466e565b6122f9565b6102cc610561366004614789565b61237b565b6102cc61057436600461441b565b6126cc565b61043661058736600461466e565b61289c565b6102cc61059a3660046143e3565b612a72565b600a54600160a01b900461ffff166103cf565b6102e1600e5481565b6102e16105c936600461466e565b612b16565b6102cc6105dc36600461473d565b612b37565b6102cc6105ef3660046143e3565b612f1a565b6102cc6106023660046143e3565b613004565b6009546001600160a01b0316331461063a5760405162461bcd60e51b8152600401610631906149e8565b60405180910390fd5b60125460ff161561065d5760405162461bcd60e51b815260040161063190614b8e565b6000828152601060205260409020610673610c10565b816006015411156106965760405162461bcd60e51b815260040161063190614b45565b60018082015460ff1660038111156106be57634e487b7160e01b600052602160045260246000fd5b1461070b5760405162461bcd60e51b815260206004820181905260248201527f4c6f747465727920537461746520696e636f727265637420666f7220647261776044820152606401610631565b60018101805460ff191660021790556107226115c2565b6002820155600480546040516337347e0560e11b8152918201859052602482018490526001600160a01b031690636e68fc0a906044015b602060405180830381600087803b15801561077357600080fd5b505af1158015610787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ab91906145e2565b60068190556040805185815260208101929092527ff8cdf8355a0f31bbad8998a631f5a75dcb3e475a010b34a111ed105fe88e751a910160405180910390a1505050565b6009546000906001600160a01b0316331461081c5760405162461bcd60e51b8152600401610631906149e8565b6108268383613076565b90505b92915050565b6000546001600160a01b031633146108595760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b03811661087f5760405162461bcd60e51b815260040161063190614aab565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146108cb5760405162461bcd60e51b815260040161063190614ae2565b60048661ffff16101561092a5760405162461bcd60e51b815260206004820152602160248201527f52616e6765206f66206e756d626572206d75737420626520342061746c6561736044820152601d60fa1b6064820152608401610631565b61ffff851661097b5760405162461bcd60e51b815260206004820152601f60248201527f506f776572206e756d6265722072616e67652063616e206e6f742062652030006044820152606401610631565b801580159061098957508115155b6109d55760405162461bcd60e51b815260206004820152601960248201527f5072697a65206f7220636f73742063616e6e6f742062652030000000000000006044820152606401610631565b6000805b84811015610a2757858582818110610a0157634e487b7160e01b600052603260045260246000fd5b9050602002013582610a1391906150ce565b915080610a1f816152ec565b9150506109d9565b50620f42408114610a7a5760405162461bcd60e51b815260206004820152601e60248201527f5072697a6520646973747269627574696f6e206973206e6f74203130302500006044820152606401610631565b600a805461ffff888116600160b01b0261ffff60b01b19918b16600160a01b029190911663ffffffff60a01b1990921691909117179055610abd600d86866141f8565b50600b829055600c839055600a546040517f067550c482e59ec2971e38a6fceb771fc31d75786daa4dbcc378a4ce3f2fbd6391610b169161ffff600160a01b8304811692600160b01b90041690600d9087908990614c65565b60405180910390a150505050505050565b6000546001600160a01b03163314610b515760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b038116610b775760405162461bcd60e51b815260040161063190614aab565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b0316610bae57600080fd5b60015460405163117c72b360e11b8152600481018390526001600160a01b03909116906322f8e566906024015b600060405180830381600087803b158015610bf557600080fd5b505af1158015610c09573d6000803e3d6000fd5b5050505050565b6001546000906001600160a01b031615610caf57600160009054906101000a90046001600160a01b03166001600160a01b03166329cb924d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c7257600080fd5b505afa158015610c86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610caa91906145e2565b905090565b504290565b6000546001600160a01b03163314610cde5760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b038116610d045760405162461bcd60e51b815260040161063190614aab565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260106020526040812060030154610d42838261520d565b949350505050565b6000546001600160a01b03163314610d745760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b038116610d9a5760405162461bcd60e51b815260040161063190614aab565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b610dc4614243565b600060075411610de65760405162461bcd60e51b815260040161063190614a7f565b60075460009081526010602090815260409182902082516101208101909352805483526001810154909183019060ff166003811115610e3557634e487b7160e01b600052602160045260246000fd5b6003811115610e5457634e487b7160e01b600052602160045260246000fd5b8152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020018280548015610ebb57602002820191906000526020600020905b815481526020019060010190808311610ea7575b50505050508152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020018280548015610f4f57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610f165790505b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015610fa757602002820191906000526020600020905b815481526020019060010190808311610f93575b505050505081525050905090565b6000546001600160a01b03163314610fdf5760405162461bcd60e51b815260040161063190614ae2565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b333b156110485760405162461bcd60e51b815260040161063190614b17565b3332146110675760405162461bcd60e51b8152600401610631906149b1565b60328111156110b05760405162461bcd60e51b8152602060048201526015602482015274426174636820636c61696d20746f6f206c6172676560581b6044820152606401610631565b6110b8610c10565b60008481526010602052604090206006015411156111115760405162461bcd60e51b8152602060048201526016602482015275576169742074696c6c20656e6420746f20636c61696d60501b6044820152606401610631565b600360008481526010602052604090206001015460ff16600381111561114757634e487b7160e01b600052602160045260246000fd5b146111945760405162461bcd60e51b815260206004820152601e60248201527f57696e6e696e67204e756d62657273206e6f742063686f73656e2079657400006044820152606401610631565b6000805b828110156115b15760035433906001600160a01b0316639d7553678686858181106111d357634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016111f891815260200190565b60206040518083038186803b15801561121057600080fd5b505afa158015611224573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124891906143ff565b6001600160a01b0316146112995760405162461bcd60e51b81526020600482015260186024820152774f6e6c7920746865206f776e65722063616e20636c61696d60401b6044820152606401610631565b6003546001600160a01b0316639191a7ea8585848181106112ca57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016112ef91815260200190565b60206040518083038186803b15801561130757600080fd5b505afa15801561131b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133f91906145c2565b156113495761159f565b6003546001600160a01b031663ed06a74085858481811061137a57634e487b7160e01b600052603260045260246000fd5b90506020020135876040518363ffffffff1660e01b81526004016113a8929190918252602082015260400190565b602060405180830381600087803b1580156113c257600080fd5b505af11580156113d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fa91906145c2565b6114465760405162461bcd60e51b815260206004820152601a60248201527f4e756d6265727320666f72207469636b657420696e76616c69640000000000006044820152606401610631565b600354600090611580906001600160a01b0316639839eafd87878681811061147e57634e487b7160e01b600052603260045260246000fd5b905060200201356040518263ffffffff1660e01b81526004016114a391815260200190565b60006040518083038186803b1580156114bb57600080fd5b505afa1580156114cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114f7919081019061449c565b6000888152601060209081526040918290206007018054835181840281018401909452808452909183018282801561157657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161153d5790505b505050505061354c565b9050600061158e828861205d565b905061159a81856150ce565b935050505b806115a9816152ec565b915050611198565b506115bc33826136a1565b50505050565b6008546002546040516370a0823160e01b8152306004820152600092916001600160a01b0316906370a082319060240160206040518083038186803b15801561160a57600080fd5b505afa15801561161e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164291906145e2565b610caa919061524d565b333b1561166b5760405162461bcd60e51b815260040161063190614b17565b33321461168a5760405162461bcd60e51b8152600401610631906149b1565b611692610c10565b60008381526010602052604090206006015411156116eb5760405162461bcd60e51b8152602060048201526016602482015275576169742074696c6c20656e6420746f20636c61696d60501b6044820152606401610631565b600360008381526010602052604090206001015460ff16600381111561172157634e487b7160e01b600052602160045260246000fd5b1461176e5760405162461bcd60e51b815260206004820152601e60248201527f57696e6e696e67204e756d62657273206e6f742063686f73656e2079657400006044820152606401610631565b600354604051639d75536760e01b81526004810183905233916001600160a01b031690639d7553679060240160206040518083038186803b1580156117b257600080fd5b505afa1580156117c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ea91906143ff565b6001600160a01b03161461183b5760405162461bcd60e51b81526020600482015260186024820152774f6e6c7920746865206f776e65722063616e20636c61696d60401b6044820152606401610631565b6003546040516303b41a9d60e61b815260048101839052602481018490526001600160a01b039091169063ed06a74090604401602060405180830381600087803b15801561188857600080fd5b505af115801561189c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118c091906145c2565b61190c5760405162461bcd60e51b815260206004820152601a60248201527f4e756d6265727320666f72207469636b657420696e76616c69640000000000006044820152606401610631565b600354604051639839eafd60e01b8152600481018390526000916119f7916001600160a01b0390911690639839eafd9060240160006040518083038186803b15801561195757600080fd5b505afa15801561196b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611993919081019061449c565b60008581526010602090815260409182902060070180548351818402810184019094528084529091830182828015611576576000918252602091829020805461ffff16845290820283019290916002910180841161153d579050505050505061354c565b90506000611a05828561205d565b90506115bc33826136a1565b6060600060075411611a355760405162461bcd60e51b815260040161063190614a7f565b600754600090815260106020526040902060048101546001600160401b03811115611a7057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611a99578160200160208202803683370190505b5091506000611aa66115c2565b905060005b6004830154811015611b3b57620f4240836004018281548110611ade57634e487b7160e01b600052603260045260246000fd5b906000526020600020015483611af4919061520d565b611afe919061510b565b848281518110611b1e57634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611b33816152ec565b915050611aab565b50505090565b6000546001600160a01b03163314611b6b5760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b038116611b915760405162461bcd60e51b815260040161063190614aab565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b600a546001600160a01b03163314611c0d5760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c79207a61702066756e6374696f6e2063616e2063616c6c0000000000006044820152606401610631565b60125460ff1615611c305760405162461bcd60e51b815260040161063190614b8e565b6000611c3a610c10565b6000878152601060205260409020600581015491925090821015611c705760405162461bcd60e51b815260040161063190614a11565b80600601548210611c935760405162461bcd60e51b815260040161063190614a48565b6000600182015460ff166003811115611cbc57634e487b7160e01b600052602160045260246000fd5b1415611ce557611cca610c10565b816005015411611ce5576001818101805460ff191690911790555b60018082015460ff166003811115611d0d57634e487b7160e01b600052602160045260246000fd5b14611d5a5760405162461bcd60e51b815260206004820152601d60248201527f4c6f7474657279206e6f7420696e20737461746520666f72206d696e740000006044820152606401610631565b611d97858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506136c992505050565b604051634f7d93db60e01b81526004810188905260ff861660248201526000903090634f7d93db9060440160206040518083038186803b158015611dda57600080fd5b505afa158015611dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1291906145e2565b600354600a5460405163dad97f0960e01b81529293506000926001600160a01b039092169163dad97f0991611e5f918c918e918d91600160a01b900461ffff16908d908d906004016148ec565b600060405180830381600087803b158015611e7957600080fd5b505af1158015611e8d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611eb5919081019061453c565b9050876001600160a01b03167f974e689131c5193e06c220e7ac3790b09bf22516da5ecd32834e19fb8a8299ed82888886604051611ef69493929190614946565b60405180910390a2600254611f16906001600160a01b0316333085613a2a565b505050505050505050565b6009546001600160a01b03163314611f4b5760405162461bcd60e51b8152600401610631906149e8565b60125460ff1615611f6e5760405162461bcd60e51b815260040161063190614b8e565b6000828152601060205260409020611f84610c10565b81600601541115611fa75760405162461bcd60e51b815260040161063190614b45565b6002600182015460ff166003811115611fd057634e487b7160e01b600052602160045260246000fd5b146120275760405162461bcd60e51b815260206004820152602160248201527f4c6f747465727920537461746520696e636f727265637420666f7220726574726044820152607960f81b6064820152608401610631565b600480546040516337347e0560e11b8152918201859052602482018490526001600160a01b031690636e68fc0a90604401610759565b600060ff83161561082957600083612077600460016150e6565b6120819190615264565b60ff16905060006010600085815260200190815260200160002060040182815481106120bd57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050600060106000868152602001908152602001600020600801838154811061210157634e487b7160e01b600052603260045260246000fd5b906000526020600020015490506000811115612175576121256002620f4240615162565b81600e54620f4240612137919061524d565b60008881526010602052604090206002015461215490869061520d565b61215e919061520d565b612168919061510b565b612172919061510b565b93505b50505092915050565b6009546001600160a01b031633146121a85760405162461bcd60e51b8152600401610631906149e8565b6000600754116121ca5760405162461bcd60e51b815260040161063190614a7f565b6007546000908152601060205260408120906121e4610c10565b9050816005015481101561220a5760405162461bcd60e51b815260040161063190614a11565b8160060154811061222d5760405162461bcd60e51b815260040161063190614a48565b6000600183015460ff16600381111561225657634e487b7160e01b600052602160045260246000fd5b141561227f57612264610c10565b82600501541161227f576001828101805460ff191690911790555b5050565b6000546001600160a01b031633146122ad5760405162461bcd60e51b815260040161063190614ae2565b600081116122f45760405162461bcd60e51b815260206004820152601460248201527304475726174696f6e2063616e6e6f7420626520360641b6044820152606401610631565b601155565b6000546001600160a01b031633146123235760405162461bcd60e51b815260040161063190614ae2565b620f42408111156123765760405162461bcd60e51b815260206004820152601a60248201527f746f74616c206d757374206c6f776572207468616e20313030250000000000006044820152606401610631565b600e55565b333b1561239a5760405162461bcd60e51b815260040161063190614b17565b3332146123b95760405162461bcd60e51b8152600401610631906149b1565b60125460ff16156123dc5760405162461bcd60e51b815260040161063190614b8e565b60006123e6610c10565b600086815260106020526040902060058101549192509082101561241c5760405162461bcd60e51b815260040161063190614a11565b8060060154821061243f5760405162461bcd60e51b815260040161063190614a48565b6000600182015460ff16600381111561246857634e487b7160e01b600052602160045260246000fd5b141561249157612476610c10565b816005015411612491576001818101805460ff191690911790555b60018082015460ff1660038111156124b957634e487b7160e01b600052602160045260246000fd5b146125065760405162461bcd60e51b815260206004820152601d60248201527f4c6f7474657279206e6f7420696e20737461746520666f72206d696e740000006044820152606401610631565b612543858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506136c992505050565b604051634f7d93db60e01b81526004810187905260ff861660248201526000903090634f7d93db9060440160206040518083038186803b15801561258657600080fd5b505afa15801561259a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125be91906145e2565b600354600a5460405163dad97f0960e01b81529293506000926001600160a01b039092169163dad97f099161260b9133918d918d91600160a01b900461ffff16908d908d906004016148ec565b600060405180830381600087803b15801561262557600080fd5b505af1158015612639573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612661919081019061453c565b9050336001600160a01b03167f974e689131c5193e06c220e7ac3790b09bf22516da5ecd32834e19fb8a8299ed828888866040516126a29493929190614946565b60405180910390a26002546126c2906001600160a01b0316333085613a2a565b5050505050505050565b600054600160a81b900460ff16806126ee5750600054600160a01b900460ff16155b6127515760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610631565b600054600160a81b900460ff1615801561277b576000805461ffff60a01b191661010160a01b1790555b6000546001600160a01b031633146127a55760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b038616158015906127c557506001600160a01b03851615155b80156127d957506001600160a01b03841615155b80156127ed57506001600160a01b03831615155b801561280157506001600160a01b03871615155b61281d5760405162461bcd60e51b815260040161063190614aab565b600280546001600160a01b03199081166001600160a01b038a811691909117909255600380548216898416179055600480548216888416179055600f80548216878416179055600580548216868416179055600980549091169184169190911790558015612893576000805460ff60a81b191690555b50505050505050565b6128a4614243565b60008281526010602090815260409182902082516101208101909352805483526001810154909183019060ff1660038111156128f057634e487b7160e01b600052602160045260246000fd5b600381111561290f57634e487b7160e01b600052602160045260246000fd5b815260200160028201548152602001600382015481526020016004820180548060200260200160405190810160405280929190818152602001828054801561297657602002820191906000526020600020905b815481526020019060010190808311612962575b50505050508152602001600582015481526020016006820154815260200160078201805480602002602001604051908101604052809291908181526020018280548015612a0a57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116129d15790505b5050505050815260200160088201805480602002602001604051908101604052809291908181526020018280548015612a6257602002820191906000526020600020905b815481526020019060010190808311612a4e575b5050505050815250509050919050565b6000546001600160a01b03163314612a9c5760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b038116612ae55760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a590818dbdb9d1c9858dd60821b6044820152606401610631565b6000612aef6115c2565b6012805460ff1916600117905560025490915061227f906001600160a01b03168383613a95565b600d8181548110612b2657600080fd5b600091825260209091200154905081565b6004546001600160a01b03163314612b895760405162461bcd60e51b815260206004820152601560248201527427b7363c903930b73237b69033b2b732b930ba37b960591b6044820152606401610631565b60125460ff1615612bac5760405162461bcd60e51b815260040161063190614b8e565b60008381526010602052604090206002600182015460ff166003811115612be357634e487b7160e01b600052602160045260246000fd5b14612c255760405162461bcd60e51b8152602060048201526012602482015271111c985dc81b9d5b58995c9cc8199a5c9cdd60721b6044820152606401610631565b826006541415612e5457612c3882613ac5565b8051612c4e916007840191602090910190614290565b50600354600a546040516342c9851760e11b81526000926001600160a01b0316916385930a2e91612c95918991600160a01b90910461ffff16906007880190600401614ccf565b60006040518083038186803b158015612cad57600080fd5b505afa158015612cc1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612ce9919081019061453c565b60018301805460ff1916600317905590506000805b6004840154811015612de157828181518110612d2a57634e487b7160e01b600052603260045260246000fd5b6020026020010151846008018281548110612d5557634e487b7160e01b600052603260045260246000fd5b90600052602060002001819055506000838281518110612d8557634e487b7160e01b600052603260045260246000fd5b60200260200101511115612dcf57836004018181548110612db657634e487b7160e01b600052603260045260246000fd5b906000526020600020015482612dcc91906150ce565b91505b80612dd9816152ec565b915050612cfe565b506000620f424082612df16115c2565b612dfb919061520d565b612e05919061510b565b90508015612e50576000620f4240600e5483612e21919061520d565b612e2b919061510b565b90506000612e39828461524d565b9050612e4481613e08565b612e4d82613e1c565b50505b5050505b7f222f4196142d697de78db701f612253db29adeea22a556e89924693a1cbd297e84600360009054906101000a90046001600160a01b03166001600160a01b031663c4e41b226040518163ffffffff1660e01b815260040160206040518083038186803b158015612ec457600080fd5b505afa158015612ed8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612efc91906145e2565b6040805192835260208301919091520160405180910390a150505050565b6000546001600160a01b03163314612f445760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b038116612fa95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610631565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461302e5760405162461bcd60e51b815260040161063190614ae2565b6001600160a01b0381166130545760405162461bcd60e51b815260040161063190614aab565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b60125460009060ff161561309c5760405162461bcd60e51b815260040161063190614b8e565b82158015906130aa57508183105b6130f65760405162461bcd60e51b815260206004820152601e60248201527f54696d657374616d707320666f72206c6f747465727920696e76616c696400006044820152606401610631565b600754158061313b5750600360075460009081526010602052604090206001015460ff16600381111561313957634e487b7160e01b600052602160045260246000fd5b145b6131875760405162461bcd60e51b815260206004820181905260248201527f63757272656e74206c6f7474657279206973206e6f7420636f6d706c657465646044820152606401610631565b6007546131959060016150ce565b6007819055905060006131aa600460016150e6565b60ff166001600160401b038111156131d257634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156131fb578160200160208202803683370190505b50600d549091506000906001600160401b0381111561322a57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613253578160200160208202803683370190505b5090506000613260610c10565b86111561326f57506000613273565b5060015b600b5461327e6115c2565b10156132fb57600f546001600160a01b031663ca1d209d61329d6115c2565b600b546132aa919061524d565b6040518263ffffffff1660e01b81526004016132c891815260200190565b600060405180830381600087803b1580156132e257600080fd5b505af11580156132f6573d6000803e3d6000fd5b505050505b600060405180610120016040528086815260200183600381111561332f57634e487b7160e01b600052602160045260246000fd5b8152602001600b548152602001600c548152602001600d80548060200260200160405190810160405280929190818152602001828054801561339057602002820191906000526020600020905b81548152602001906001019080831161337c575b5050505050815260200188815260200187815260200185815260200184815250905080601060008781526020019081526020016000206000820151816000015560208201518160010160006101000a81548160ff0219169083600381111561340857634e487b7160e01b600052602160045260246000fd5b021790555060408201516002820155606082015160038201556080820151805161343c916004840191602090910190614334565b5060a0820151600582015560c0820151600682015560e0820151805161346c916007840191602090910190614290565b506101008201518051613489916008840191602090910190614334565b5050600354604080516362720d9160e11b815290517fc13b64098dba6f1b221547b6e972533af47812e37968a7abbff8c0e60ff58cba935088926001600160a01b03169163c4e41b22916004808301926020929190829003018186803b1580156134f257600080fd5b505afa158015613506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061352a91906145e2565b6040805192835260208301919091520160405180910390a15050505092915050565b6000805b6001835161355e919061524d565b81101561360e5760005b60018551613576919061524d565b8110156135fb5783818151811061359d57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff168583815181106135c957634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1614156135e9576135e66001846150e6565b92505b806135f3816152ec565b915050613568565b5080613606816152ec565b915050613550565b5060ff811660041480156136915750826001845161362c919061524d565b8151811061364a57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff168260018451613665919061524d565b8151811061368357634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16145b15610829576108266001826150e6565b806008546136af919061524d565b60085560025461227f906001600160a01b03168383613a95565b60328260ff1611156137145760405162461bcd60e51b81526020600482015260146024820152734261746368206d696e7420746f6f206c6172676560601b6044820152606401610631565b613720600460016150e6565b61372a908361522c565b60ff168151146137755760405162461bcd60e51b8152602060048201526016602482015275496e76616c69642063686f73656e206e756d6265727360501b6044820152606401610631565b60005b8151811015613a2557600061378f600460016150e6565b61379c9060ff1683615328565b905060048114156138725760008383815181106137c957634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff161180156138215750600a60169054906101000a900461ffff1661ffff1683838151811061381257634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1611155b61386d5760405162461bcd60e51b815260206004820152601a60248201527f6f7574206f662072616e67653a20706f776572206e756d6265720000000000006044820152606401610631565b61392f565b600083838151811061389457634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff161180156138ec5750600a60149054906101000a900461ffff1661ffff168383815181106138dd57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1611155b61392f5760405162461bcd60e51b815260206004820152601460248201527337baba1037b3103930b733b29d10373ab6b132b960611b6044820152606401610631565b600081118015613940575060048114155b15613a12576000613951828461524d565b90505b61395f60018461524d565b8111613a105783818151811061398557634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff168484815181106139b157634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1614156139fe5760405162461bcd60e51b815260206004820152601060248201526f323ab83634b1b0ba3290373ab6b132b960811b6044820152606401610631565b80613a08816152ec565b915050613954565b505b5080613a1d816152ec565b915050613778565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526115bc9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613e88565b6040516001600160a01b038316602482015260448101829052613a2590849063a9059cbb60e01b90606401613a5e565b60606000613ad5600460016150e6565b60ff166001600160401b03811115613afd57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613b26578160200160208202803683370190505b50600a54909150600090600160a01b900461ffff166001600160401b03811115613b6057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613b89578160200160208202803683370190505b50905060005b600a5461ffff600160a01b90910481169082161015613bfc57613bb38160016150a8565b828261ffff1681518110613bd757634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280613bf4816152ca565b915050613b8f565b5060008060018351613c0e919061524d565b90505b8015613d2a576000818783604051602001613c36929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c613c599190615328565b9050838281518110613c7b57634e487b7160e01b600052603260045260246000fd5b60200260200101519250838181518110613ca557634e487b7160e01b600052603260045260246000fd5b6020026020010151848381518110613ccd57634e487b7160e01b600052603260045260246000fd5b602002602001019061ffff16908161ffff168152505082848281518110613d0457634e487b7160e01b600052603260045260246000fd5b61ffff909216602092830291909101909101525080613d22816152b3565b915050613c11565b5060005b6004811015613da457828181518110613d5757634e487b7160e01b600052603260045260246000fd5b6020026020010151848281518110613d7f57634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015280613d9c816152ec565b915050613d2e565b50600a54613dbd90600160b01b900461ffff1686615307565b613dc89060016150a8565b83600460ff1681518110613dec57634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015250909392505050565b80600854613e1691906150ce565b60085550565b600554600254613e3a916001600160a01b0391821691166000613f5a565b600554600254613e57916001600160a01b03918216911683613f5a565b60055460405163ce3f865f60e01b8152600481018390526001600160a01b039091169063ce3f865f90602401610bdb565b6000613edd826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661407e9092919063ffffffff16565b805190915015613a255780806020019051810190613efb91906145c2565b613a255760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610631565b801580613fe35750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b158015613fa957600080fd5b505afa158015613fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fe191906145e2565b155b61404e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610631565b6040516001600160a01b038316602482015260448101829052613a2590849063095ea7b360e01b90606401613a5e565b606061408d8484600085614097565b90505b9392505050565b6060824710156140f85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610631565b843b6141465760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610631565b600080866001600160a01b0316858760405161416291906148d0565b60006040518083038185875af1925050503d806000811461419f576040519150601f19603f3d011682016040523d82523d6000602084013e6141a4565b606091505b50915091506141b48282866141bf565b979650505050505050565b606083156141ce575081614090565b8251156141de5782518084602001fd5b8160405162461bcd60e51b8152600401610631919061497e565b828054828255906000526020600020908101928215614233579160200282015b82811115614233578235825591602001919060010190614218565b5061423f92915061436f565b5090565b604080516101208101909152600080825260208201908152602001600081526020016000815260200160608152602001600081526020016000815260200160608152602001606081525090565b82805482825590600052602060002090600f016010900481019282156142335791602002820160005b838211156142f957835183826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026142b9565b80156143275782816101000a81549061ffff02191690556002016020816001010492830192600103026142f9565b505061423f92915061436f565b828054828255906000526020600020908101928215614233579160200282015b82811115614233578251825591602001919060010190614354565b5b8082111561423f5760008155600101614370565b60008083601f840112614395578182fd5b5081356001600160401b038111156143ab578182fd5b6020830191508360208260051b85010111156143c657600080fd5b9250929050565b803560ff811681146143de57600080fd5b919050565b6000602082840312156143f4578081fd5b81356140908161537e565b600060208284031215614410578081fd5b81516140908161537e565b60008060008060008060c08789031215614433578182fd5b863561443e8161537e565b9550602087013561444e8161537e565b9450604087013561445e8161537e565b9350606087013561446e8161537e565b9250608087013561447e8161537e565b915060a087013561448e8161537e565b809150509295509295509295565b600060208083850312156144ae578182fd5b82516001600160401b038111156144c3578283fd5b8301601f810185136144d3578283fd5b80516144e66144e182615085565b615055565b80828252848201915084840188868560051b8701011115614505578687fd5b8694505b8385101561453057805161451c81615396565b835260019490940193918501918501614509565b50979650505050505050565b6000602080838503121561454e578182fd5b82516001600160401b03811115614563578283fd5b8301601f81018513614573578283fd5b80516145816144e182615085565b80828252848201915084840188868560051b87010111156145a0578687fd5b8694505b838510156145305780518352600194909401939185019185016145a4565b6000602082840312156145d3578081fd5b81518015158114614090578182fd5b6000602082840312156145f3578081fd5b5051919050565b60008060008060008060a08789031215614612578182fd5b863561461d81615396565b9550602087013561462d81615396565b945060408701356001600160401b03811115614647578283fd5b61465389828a01614384565b979a9699509760608101359660809091013595509350505050565b60006020828403121561467f578081fd5b5035919050565b60008060008060006080868803121561469d578283fd5b8535945060208601356146af8161537e565b93506146bd604087016143cd565b925060608601356001600160401b038111156146d7578182fd5b6146e388828901614384565b969995985093965092949392505050565b600080600060408486031215614708578081fd5b8335925060208401356001600160401b03811115614724578182fd5b61473086828701614384565b9497909650939450505050565b600080600060608486031215614751578081fd5b505081359360208301359350604090920135919050565b6000806040838503121561477a578182fd5b50508035926020909101359150565b6000806000806060858703121561479e578182fd5b843593506147ae602086016143cd565b925060408501356001600160401b038111156147c8578283fd5b6147d487828801614384565b95989497509550505050565b600080604083850312156147f2578182fd5b6147fb836143cd565b946020939093013593505050565b81835260006020808501945082825b8581101561484157813561482b81615396565b61ffff1687529582019590820190600101614818565b509495945050505050565b6000815180845260208085019450808401835b8381101561484157815161ffff168752958201959082019060010161485f565b6000815180845260208085019450808401835b8381101561484157815187529582019590820190600101614892565b600481106148cc57634e487b7160e01b600052602160045260246000fd5b9052565b600082516148e2818460208701615287565b9190910192915050565b60018060a01b038716815285602082015260ff8516604082015261ffff8416606082015260a06080820152600061492760a083018486614809565b98975050505050505050565b602081526000610826602083018461487f565b606081526000614959606083018761487f565b828103602084015261496c818688614809565b91505082604083015295945050505050565b602081526000825180602084015261499d816040850160208701615287565b601f01601f19169190910160400192915050565b6020808252601a908201527f70726f787920636f6e7472616374206e6f7420616c6c6f776564000000000000604082015260600190565b6020808252600f908201526e27b7363c9031b7b73a3937b63632b960891b604082015260600190565b6020808252601b908201527f496e76616c69642074696d6520666f72206d696e743a73746172740000000000604082015260600190565b60208082526019908201527f496e76616c69642074696d6520666f72206d696e743a656e6400000000000000604082015260600190565b6020808252601290820152711b9bc81b1bdd1d195c9e4818dc99585d195960721b604082015260600190565b6020808252601d908201527f436f6e7472616374732063616e6e6f7420626520302061646472657373000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526014908201527318dbdb9d1c9858dd081b9bdd08185b1b1bddd95960621b604082015260600190565b60208082526029908201527f43616e6e6f74207365742077696e6e696e67206e756d6265727320647572696e60408201526867206c6f747465727960b81b606082015260800190565b6020808252601a908201527f5468697320636f6e747261637420776173207570677261646564000000000000604082015260600190565b602081528151602082015260006020830151614be460408401826148ae565b50604083015160608301526060830151608083015260808301516101208060a0850152614c1561014085018361487f565b915060a085015160c085015260c085015160e085015260e0850151601f19610100818786030181880152614c49858461484c565b908801518782039092018488015293509050612172838261487f565b600060a0820161ffff808916845260208189168186015260a06040860152829150875480845260c0860192508885528185209350845b81811015614cb757845484526001948501949383019301614c9b565b50505060608401959095525050608001529392505050565b60006060808301868452602061ffff8088168287015260408481880152838854614cfd818790815260200190565b60008b81526020902096509150875b81600f82011015614e4d57865461ffff868216168452614d36878501878360101c1661ffff169052565b61ffff81881c87161684860152614d57898501878360301c1661ffff169052565b6080614d6c8186018884891c1661ffff169052565b60a0614d82818701898560501c1661ffff169052565b60c0614d978188018a868f1c1661ffff169052565b60e0614dad8189018b8760701c1661ffff169052565b61ffff85851c8b1616610100890152614dd261012089018b8760901c1661ffff169052565b61ffff85841c8b1616610140890152614df761016089018b8760b01c1661ffff169052565b61ffff85831c8b1616610180890152614e1c6101a089018b8760d01c1661ffff169052565b84901c891661ffff166101c088015250505060f01c6101e08401526001969096019561020090920191601001614d0c565b95549581811015614e695761ffff878616168352918501916001015b81811015614e8b57614e8383868960101c1661ffff169052565b918501916001015b81811015614ea65761ffff87871c8616168352918501916001015b81811015614ec857614ec083868960301c1661ffff169052565b918501916001015b81811015614ee35761ffff87851c8616168352918501916001015b81811015614f0557614efd83868960501c1661ffff169052565b918501916001015b81811015614f205761ffff87891c8616168352918501916001015b81811015614f4257614f3a83868960701c1661ffff169052565b918501916001015b81811015614f6457614f5c83868960801c1661ffff169052565b918501916001015b81811015614f8657614f7e83868960901c1661ffff169052565b918501916001015b81811015614fa857614fa083868960a01c1661ffff169052565b918501916001015b81811015614fca57614fc283868960b01c1661ffff169052565b918501916001015b81811015614fec57614fe483868960c01c1661ffff169052565b918501916001015b8181101561500e5761500683868960d01c1661ffff169052565b918501916001015b818110156150305761502883868960e01c1661ffff169052565b918501916001015b818110156150445760f087901c8352918501915b50909b9a5050505050505050505050565b604051601f8201601f191681016001600160401b038111828210171561507d5761507d615368565b604052919050565b60006001600160401b0382111561509e5761509e615368565b5060051b60200190565b600061ffff8083168185168083038211156150c5576150c561533c565b01949350505050565b600082198211156150e1576150e161533c565b500190565b600060ff821660ff84168060ff038211156151035761510361533c565b019392505050565b60008261511a5761511a615352565b500490565b600181815b8085111561515a5781600019048211156151405761514061533c565b8085161561514d57918102915b93841c9390800290615124565b509250929050565b600061082660ff84168360008261517b57506001610829565b8161518857506000610829565b816001811461519e57600281146151a8576151c4565b6001915050610829565b60ff8411156151b9576151b961533c565b50506001821b610829565b5060208310610133831016604e8410600b84101617156151e7575081810a610829565b6151f1838361511f565b80600019048211156152055761520561533c565b029392505050565b60008160001904831182151516156152275761522761533c565b500290565b600060ff821660ff84168160ff04811182151516156152055761520561533c565b60008282101561525f5761525f61533c565b500390565b600060ff821660ff84168082101561527e5761527e61533c565b90039392505050565b60005b838110156152a257818101518382015260200161528a565b838111156115bc5750506000910152565b6000816152c2576152c261533c565b506000190190565b600061ffff808316818114156152e2576152e261533c565b6001019392505050565b60006000198214156153005761530061533c565b5060010190565b600061ffff8084168061531c5761531c615352565b92169190910692915050565b60008261533757615337615352565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461539357600080fd5b50565b61ffff8116811461539357600080fdfea26469706673582212205c5ac17f7a86c5539b08a639a025de248dd535c0830d10a2df66414771dff8d664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "_prizeForMatching(uint8,uint256)": {
        "params": {
          "_lotteryId": ": The ID of the lottery the user is claiming on",
          "_noOfMatching": ": The number of matching numbers the user has"
        },
        "returns": {
          "prize": " The prize amount in cake the user is entitled to"
        }
      },
      "getCurrentTime()": {
        "returns": {
          "_0": "uint for the current Testable timestamp."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCurrentTime(uint256)": {
        "details": "Will revert if not running in test mode.",
        "params": {
          "time": "timestamp to set current Testable time to."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateLottoSettings(uint16,uint16,uint256[],uint256,uint256)": {
        "params": {
          "_prizeDistribution": "An array defining the distribution of the          prize pool. I.e if a lotto has 5 numbers, the distribution could          be [5, 10, 15, 20, 30] = 100%. This means if you get one number          right you get 5% of the pool, 2 matching would be 10% and so on."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getCurrentTime()": {
        "notice": "Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp."
      },
      "manualStartLotto(uint256,uint256)": {
        "notice": "manually start by admin, by pass auto duration"
      },
      "setCurrentTime(uint256)": {
        "notice": "Sets the current time."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 317,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 269,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_initialized",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 272,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "_initializing",
        "offset": 21,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7714,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "timerAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2937,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "iron_",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)2215"
      },
      {
        "astId": 2940,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "ticket_",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ITicket)7245"
      },
      {
        "astId": 2943,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "randomGenerator_",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IRandomNumberGenerator)7166"
      },
      {
        "astId": 2946,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "taxService_",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ITaxService)7175"
      },
      {
        "astId": 2948,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "requestId_",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 2950,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryIdCounter_",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2958,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "unclaimedPrize_",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2960,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "controller_",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 2962,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "zap_",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2964,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "maxValidRange_",
        "offset": 20,
        "slot": "10",
        "type": "t_uint16"
      },
      {
        "astId": 2966,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "powerBallRange_",
        "offset": 22,
        "slot": "10",
        "type": "t_uint16"
      },
      {
        "astId": 2968,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "startingPrize_",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2970,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "costPerTicket_",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2973,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "prizeDistribution_",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2975,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "taxRate_",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2977,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "prizeReservePool_",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 2982,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "allLotteries_",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(LottoInfo)2934_storage)"
      },
      {
        "astId": 2985,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "defaultDuration_",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2988,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "upgraded_",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2215": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRandomNumberGenerator)7166": {
        "encoding": "inplace",
        "label": "contract IRandomNumberGenerator",
        "numberOfBytes": "20"
      },
      "t_contract(ITaxService)7175": {
        "encoding": "inplace",
        "label": "contract ITaxService",
        "numberOfBytes": "20"
      },
      "t_contract(ITicket)7245": {
        "encoding": "inplace",
        "label": "contract ITicket",
        "numberOfBytes": "20"
      },
      "t_enum(Status)2911": {
        "encoding": "inplace",
        "label": "enum Lottery.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(LottoInfo)2934_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Lottery.LottoInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(LottoInfo)2934_storage"
      },
      "t_struct(LottoInfo)2934_storage": {
        "encoding": "inplace",
        "label": "struct Lottery.LottoInfo",
        "members": [
          {
            "astId": 2913,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "lotteryID",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2916,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "lotteryStatus",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(Status)2911"
          },
          {
            "astId": 2918,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "prizePool",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2920,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "costPerTicket",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2923,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "prizeDistribution",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 2925,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "startingTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2927,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "closingTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2930,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "winningNumbers",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint16)dyn_storage"
          },
          {
            "astId": 2933,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "winners",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
